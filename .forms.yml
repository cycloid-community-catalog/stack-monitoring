shared:
- &api-key
  name: Cycloid API key
  groups:
  - name: API KEY
    technologies: [pipeline]
    vars:
    - name: "Cycloid API Key"
      description: "Cycloid API Key with full rigths to manage credentials"
      key: cycloid_api_key
      type: string
      widget: cy_cred
      required: true
      widget_config:
        cred_types: [custom]
      default: "((cycloid_io_api_key.api_key))"

- &advanced
  name: Advanced
  groups:
  - name: Enable Advanced
    technologies: [pipeline]
    vars:
      - name: Display stack advanced options
        description: Check to see stack options.
        key: advanced_opt
        widget: switch
        type: boolean
        default: false
  - name: Version selection
    condition: $advanced_opt == true
    technologies: [pipeline]
    vars:
      - name: "Terraform version"
        description: "Terraform version to use."
        key: terraform_version
        widget: simple_text
        type: string
        default: "1.6.3"
      - name: "Ansible version"
        description: "Ansible version to use."
        key: ansible_version
        widget: simple_text
        type: string
        default: "10.1"

  - name: Enable SSL
    condition: $advanced_opt == true
    technologies: [terraform]
    vars:
      - name: "Enable HTTPs"
        description: "Select wheter to enable HTTPs traffic and use SSL certificates."
        key: enable_tls
        type: boolean
        widget: switch
        default: true

  - name: SSL configuration
    condition: $advanced_opt == true && $enable_tls == true
    technologies: [terraform]
    vars:
      - name: "Create self signed certificate"
        description: "Wheter to create a self signed certificate automatically. Otherwise a certificate needs to be imported"
        key: create_self_signed_certificate
        type: boolean
        widget: switch
        default: true

  - name: SSL certificate import
    condition: $advanced_opt == true && create_self_signed_certificate == false
    technologies: [pipeline]
    vars:
      - name: "Certificate"
        description: "Credential containing certificate"
        key: tls_crt
        type: string
        widget: cy_cred
      - name: "Certificate key"
        description: "Credential containing ssl certificate"
        key: tls_key
        type: string
        widget: cy_cred


- &aws-creds
  name: AWS Credentials
  groups:
  - name: Setup
    technologies: [pipeline]
    vars:
      - name: "AWS access credential"
        description: "AWS access credential which should be used"
        key: aws_access_cred
        widget: cy_cred
        widget_config:
          display_keys: false
          cred_types:
            - aws
        type: string
        default: "((aws))"
      - name: "AWS Assume Role"
        description: "Amazon AWS access key for Terraform."
        key: aws_role_arn
        widget: simple_text
        type: string
        default: ""
      - name: "Amazon AWS region"
        description: "Amazon AWS region to use for Terraform."
        key: aws_default_region
        widget: auto_complete
        type: string
        values: ["eu-north-1","ap-south-1","eu-west-3","eu-west-2","eu-west-1","ap-northeast-2","ap-northeast-1","sa-east-1","ca-central-1","ap-southeast-1","ap-southeast-2","eu-central-1","us-east-1","us-east-2","us-west-1","us-west-2"]
        default: eu-west-1
version: "2"
use_cases:
- name: aws-vm
  sections:
  - *api-key
  - *aws-creds
  - name: VM Configuration
    groups:
    - name: General
      technologies: [terraform]
      vars:
        - name: "Instance type"
          description: "Instance type for the worker."
          key: vm_size
          widget: auto_complete
          type: string
          default: "t3.small"
          values:
            - "t3.small"
            - "t3.medium"
            - "t3.large"
            - "t3.xlarge"
            - "t3.2xlarge"
        - name: "Disk size"
          unit: Go
          description: "Root Disk size for the instance."
          key: os_disk_size
          widget: slider_range
          type: integer
          default: 30
          values:
              - 30
              - 250
        - name: "Subnet ID"
          description: "Subnet ID where to create VM."
          key: subnet_id
          widget: simple_text
          type: string
          required: true
        - name: "VPC ID"
          description: "VPC ID where to create VM."
          key: vpc_id
          widget: simple_text
          type: string
          required: true
        - name: "IAM policies"
          description: "Array of IAM ARN policies to associate to the VM."
          key: vm_iam_policies
          widget: text_area
          type: array
          default:
            [
              "ec2:DescribeTags",
              "ec2:DescribeInstances",
              "ec2:DescribeInstanceStatus",
              "cloudwatch:ListMetrics",
              "cloudwatch:GetMetricData",
            ]

    - name: SSH access
      technologies: [terraform]
      vars:
        - name: "SSH CIDR and CIDR to allow"
          description: "Map containing the CIDR and security groups IDs to allow SSH access to the monitoring VM, use the map keys cidr and sg. Default CIDR:0.0.0.0/0"
          key: ssh_to_allow
          widget: text_area
          type: map
          default:
            cidr:
              - 0.0.0.0/0
            sg: []

    - name: Bastion enable
      technologies: [pipeline]
      vars:
        - name: "Use Bastion"
          description: "Select wheter to use a Bastion to SSH instance.The bastion CIDR or SG should be added in the SSH allowed above"
          key: use_bastion
          type: boolean
          widget: switch
          default: true

    - name: Bastion URL
      condition: $use_bastion == true
      technologies: [pipeline]
      vars:
        - name: "Bastion URL"
          description: "The URL to be used to connect to the bastion, in the format {USER}@{INSTANCE"
          key: bastion_url
          type: string
          widget: simple_text

    - name: Optional VM parameters
      condition: $advanced_opt == true
      technologies: [pipeline]
      vars:
        - name: "Extra tags"
          description: "Dict of extra tags to add to resources."
          key: aws_extra_tags
          widget: text_area
          type: map
          default: {}

  - name: Monitoring tools
    groups:
    - name: Tools to install
      technologies: [terraform, ansible, pipeline]
      vars:
        - name: "Grafana install"
          description: "Wheter to install [Grafana](https://github.com/grafana/grafana-ansible-collection/tree/main/roles/grafana) on the machine as a service."
          key: grafana_install
          widget: switch
          type: boolean
          default: false
        - name: "Alertmanager install"
          description: "Wheter to install [Alertmanager](https://github.com/prometheus-community/ansible/tree/main/roles/alertmanager) on the machine as a service."
          key: alertmanager_install
          widget: switch
          type: boolean
          default: false
        - name: "Prometheus install"
          description: "Wheter to skip install [Prometheus](https://github.com/prometheus-community/ansible/tree/main/roles/prometheus) on the machine as a service."
          key: prometheus_install
          widget: switch
          type: boolean
          default: true

  - name: Exporters
    groups:
    - name: Select exporters to install
      technologies: [ansible]
      vars:
        - name: "Blackbox exporter install"
          description: "Wheter to install [blackbox exporter](https://github.com/prometheus-community/ansible/tree/main/roles/blackbox_exporter) on the machine as a service."
          key: blackbox_exporter_install
          widget: switch
          type: boolean
          default: true
        - name: "MYSQL exporter install"
          description: "Wheter to install [mysql exporter](https://github.com/prometheus-community/ansible/tree/main/roles/mysqld_exporter) on the machine as a service."
          key: mysqld_exporter_install
          widget: switch
          type: boolean
          default: false
        - name: "Postgres exporter install"
          description: "Wheter to install [postgres exporter](https://github.com/prometheus-community/ansible/tree/main/roles/postgres_exporter) on the machine as a service."
          key: postgres_exporter_install
          widget: switch
          type: boolean
          default: false
        - name: "Node exporter install"
          description: "Wheter to install [node exporter](https://github.com/prometheus-community/ansible/tree/main/roles/node_exporter) on the machine as a service."
          key: node_exporter_install
          widget: switch
          type: boolean
          default: true

  - name: Prometheus
    groups:
    - name: Prometheus login
      condition: $prometheus_install == true
      technologies: [terraform]
      vars:
        - name: "Prometheus DNS"
          description: "DNS to use for Prometheus."
          key: prometheus_domain_name
          widget: simple_text
          type: string
          default: prometheus.local
    - name: General Configuration
      condition: $prometheus_install == true
      technologies: [ansible]
      vars:
        - name: "Prometheus scraping config"
          description: "Prometheus scraping config to use. Note! prometheus, alertmanager and the database exporters are scraped. For more information check [prometheus wiki](https://prometheus.io/docs/prometheus/latest/configuration/configuration/)"
          key: prometheus_custom_configs
          widget: text_area
          type: array
          default:
            ## Node_exporter
            - job_name: 'Node_exporter'
              scheme: http
              ec2_sd_configs:
              - region: "{{ aws_default_region }}"
                port: 9100

              relabel_configs:
              - source_labels: [__meta_ec2_tag_monitoring_discovery]
                action: drop
                regex: false

              - source_labels: [__meta_ec2_private_ip]
                regex: '^(.+)$'
                replacement: '${1}:9100'
                target_label: __address__

              # Force labels on metrics
              # Instance label : Public IP, if not, default private IP
              - source_labels: [__meta_ec2_private_ip]
                action: replace
                target_label: instance
              - source_labels: [__meta_ec2_public_ip]
                regex: '^(.+)$'
                replacement: '${1}'
                target_label: instance

              # Get some ec2 labels
              - source_labels: [__meta_ec2_tag_Name]
                target_label: Name
              - source_labels: [__meta_ec2_tag_project]
                target_label: project
              - source_labels: [__meta_ec2_tag_env]
                target_label: env
              - source_labels: [__meta_ec2_tag_role]
                target_label: role
              - source_labels: [__meta_ec2_tag_organization]
                target_label: organization
              - source_labels: [__meta_ec2_instance_id]
                target_label: instance_id

              metric_relabel_configs:
              # Don't store unwanted metrics
              - source_labels: [__name__]
                action: drop
                regex: go_(.*)

              # Overrides mechanism of ec2 labels on the metric scope
              - source_labels: [cycloid_tag_Name]
                regex: '(.+)'
                target_label: Name
              - source_labels: [cycloid_tag_project]
                regex: '(.+)'
                target_label: project
              - source_labels: [cycloid_tag_env]
                regex: '(.+)'
                target_label: env
              - source_labels: [cycloid_tag_role]
                regex: '(.+)'
                target_label: role
              - source_labels: [cycloid_tag_organization]
                regex: '(.+)'
                target_label: organization
              - source_labels: [cycloid_tag_instance_id]
                regex: '(.+)'
                target_label: instance_id

              # Remove cycloid_tag_* labels
              - regex: 'cycloid_tag_.*'
                action: labeldrop
        - name: "Prometheus custom rules"
          description: "Definition of custom prometheus alert rules that will be saved at templates/rules/$organization.rules file. The syntax to follow can be find in the [prometheus doc](https://prometheus.io/docs/prometheus/latest/configuration/alerting_rules/). You just need to specify the set of group array without the groups keyword.  "
          key: prometheus_custom_rules
          widget: text_area
          type: array
          default:
            - name: example_empty
              rules: []

        # temporary remove
        #- name: "Prometheus rules"
        #  description: "Definition of prometheus rules. Other default available in the role ansible-prometheus/templates/rules, you can also create news and add to the config repository."
        #  key: prometheus_rule_files
        #  widget: text_area
        #  type: array
        #  default:
        #    - templates/rules/opsgenie.rules

  - name: Blackbox Exporter
    groups:
    - name: Configuration
      condition: $blackbox_exporter_install == true
      technologies: [ansible]
      vars:
        - name: "Blackbox exporter modules"
          description: "Blackbox exporter modules to be used, for more information please check the [official documentation](https://github.com/prometheus/blackbox_exporter/blob/master/CONFIGURATION.md)"
          key: blackbox_exporter_configuration_modules
          widget: text_area
          type: map
          default:
            http_2xx:
              prober: http
              timeout: 15s
              http:
                method: GET
                valid_http_versions:
                  - HTTP/1.1
                  - HTTP/2.0
                fail_if_not_ssl: true
                no_follow_redirects: false
                preferred_ip_protocol: ip4

        - name: "Prometheus blackbox scraping"
          description: "Blackbox scraping configuration to be added to prometheus, for more information please check the [official documentation](https://github.com/prometheus/blackbox_exporter/tree/master)"
          key: prometheus_blackbox_config
          widget: text_area
          type: array
          default:
            - job_name: 'blackbox-targets'
              params:
                module: [http_2xx]
              metrics_path: /probe
              relabel_configs:
                - source_labels: [ "__address__" ]
                  target_label: "__param_target"
                - target_label: "__address__"
                  replacement: "localhost:9115"
              static_configs:
                - targets: ["https://cycloid.io"]
                  labels:
                    Name: "cycloid-website"
                    organization: "{{organization}}"
                    project: "website"
                    env: "prod"

  - name: MySQL Exporter
    groups:
    - name: Configuration
      condition: $mysqld_exporter_install == true
      technologies: [pipeline]
      vars:
        - name: "DB Username"
          description: "MySQL database username to be used to connect to the database."
          key: mysql_db_user
          widget: cy_cred
          type: string
        - name: "DB Username"
          description: "MySQL Database password to be used to connect to the database"
          key: mysql_db_password
          widget: cy_cred
          type: string
        - name: "DB host"
          description: "MySQL Database host where the metrics should be collected"
          key: mysql_db_host
          widget: simple_text
          type: string
        - name: "DB port"
          description: "MySQL Database port where the metrics should be collected"
          key: mysql_db_port
          widget: simple_text
          type: string

  - name: PostgreSQL Exporter
    groups:
    - name: Configuration
      condition: $postgres_exporter_install == true
      technologies: [pipeline]
      vars:
        - name: "DB Username"
          description: "PostgreSQL database username to be used to connect to the database."
          key: postgres_db_user
          widget: cy_cred
          type: string
        - name: "DB Username"
          description: "PostgreSQL Database password to be used to connect to the database"
          key: postgres_db_password
          widget: cy_cred
          type: string
        - name: "DB host"
          description: "PostgreSQL Database host where the metrics should be collected"
          key: postgres_db_host
          widget: simple_text
          type: string
        - name: "DB port"
          description: "PostgreSQL Database port where the metrics should be collected"
          key: postgres_db_port
          widget: simple_text
          type: string

  - name: Alertmanager
    groups:
    - name: Alertmanager DNS
      condition: $alertmanager_install == true
      technologies: [terraform]
      vars:
        - name: "Alertmanager DNS"
          description: "DNS to use for Alertmanager."
          key: alertmanager_domain_name
          widget: simple_text
          type: string
          default: alertmanager.local
    - name: Alertmanager Configuration
      technologies: [ansible]
      condition: $alertmanager_install == true
      vars:
        - name: "Alertmanager route"
          description: "The root node of the routing tree. More info about the syntax can be found in the [oficial documentation](https://prometheus.io/docs/alerting/latest/configuration/#route)."
          key: alertmanager_route
          widget: text_area
          type: map
          default:
            receiver: default
            group_by:
              - organization
              - project
              - env
              - alertname
            group_wait: 30s
            group_interval: 5m
            repeat_interval: 15m
            routes:
            - match: # Send "critical" alerts to the default receiver
                severity: critical
              receiver: default
            - match: # Send other alerts to a dummy receiver (no action)
                receiver: 'null'
              receiver: dev_null
        - name: "Alertmanager inhibition rules"
          description: "A list of inhibition rules to mute existing alerts. More info about the syntax can be found in the [oficial documentation](https://prometheus.io/docs/alerting/latest/configuration/#inhibit_rule)."
          key: alertmanager_inhibit_rules
          widget: text_area
          type: array
          default:
            - source_match: # mutes alerts warning when a critical alert related is active
                severity: critical
              target_match:
                severity: warning
              equal:
                - instance
                - organization
                - project
                - env
                - alertname
        - name: "Alertmanager receivers"
          description: "A list of notification receivers., as specified in the oficial documentation [here](TODO)."
          key: alertmanager_receivers
          widget: text_area
          type: array
          default:
            - name: 'default'
              email_configs:
              - to: 'test@example.com'  # Placeholder email address for testing
                from: 'alertmanager@example.com'  # Sender email (can be a dummy address)
                smarthost: 'localhost:25'
                send_resolved: true  # Send notifications for resolved alerts

            - name: 'dev_null'
              # Deliberately left empty to not deliver anywhere.
    - name: External Alertmanager (not deployed in machine)
      technologies: [pipeline]
      condition: $alertmanager_install == false && $prometheus_install == true
      vars:
        - name: "Username"
          description: "Basic authentification username to use to connect to external alertmanager"
          key: external_alertmanager_username
          widget: cy_cred
          type: string
        - name: "Password"
          description: "Basic authentification password to use to connect to external alertmanager"
          key: external_alertmanager_password
          widget: cy_cred
          type: string
        - name: "External Alertmanager list"
          description: "Array of targets to connect to external alertmanager"
          key: external_alertmanager_targets
          widget: text_area
          type: array
          default:
            - alertmanager-0.test.com
            - alertmanager-1.test.com

  - name: Grafana
    groups:
    - name: Grafana DNS
      condition: $grafana_install == true
      technologies: [terraform]
      vars:
        - name: "Grafana DNS"
          description: "DNS to use for Grafana."
          key: grafana_domain_name
          widget: simple_text
          type: string
          default: grafana.local

    - name: Grafana Configuration
      technologies: [ansible]
      condition: $grafana_install == true
      vars:
        - name: "Grafana Dashboards"
          description: "List of dashboards which should be imported by ID, available publicly at [grafana](https://grafana.com/grafana/dashboards/)"
          key: grafana_dashboards
          type: array
          widget: text_area
          default:
            - dashboard_id: 1860 #node-exporter
              revision_id: 37
              datasource: prometheus
            - dashboard_id: 13659
              revision_id: 1
              datasource: prometheus

  - *advanced

  - name: DNS Creation
    condition: $advanced_opt == true
    technologies: [terraform]
    vars:
      - name: Create DNS
        description: Wheter to create DNS records for prometheus, alertmanager and grafana using AWS DNS. Note! Requires a DNS Zone
        key: create_dns
        widget: switch
        type: boolean
        default: false
  - name: DNS Zone
    technologies: [terraform]
    condition: $advanced_opt == true && $create_dns == true
    vars:
      - name: " AWS Route53 Zone"
        description: "AWS Route53 Zone name to use for creating the different monitoring records."
        key: aws_dns_zone_name
        widget: simple_text
        type: string
        default: ""

- name: k8s
  sections:
  - *api-key

  - name: K8s Access
    groups:
    - name: k8s Access
      technologies: [pipeline]
      vars:
      - name: "K8s config file"
        description: "The k8s config file content to be used to connect to the cluster and deploy the different monitoring resources."
        key: kubeconfig_content
        widget: cy_cred
        type: string
        required: true

  - name: Monitoring tools
    groups:
    - name: Tools to install
      technologies: [pipeline]
      vars:
        - name: "Grafana install"
          description: "Wheter to install [Grafana](https://github.com/grafana/grafana-ansible-collection/tree/main/roles/grafana) on the k8s cluster."
          key: grafana_install
          widget: switch
          type: boolean
          default: false
        - name: "Alertmanager install"
          description: "Wheter to install [Alertmanager](https://github.com/prometheus-community/ansible/tree/main/roles/alertmanager) on the k8s cluster."
          key: alertmanager_install
          widget: switch
          type: boolean
          default: false
        - name: "Prometheus install"
          description: "Wheter to skip install [Prometheus](https://github.com/prometheus-community/ansible/tree/main/roles/prometheus) on the k8s cluster."
          key: prometheus_install
          widget: switch
          type: boolean
          default: true
        #- name: "Thanos install"
        #  description: "Wheter to skip install [Thanos](https://thanos.io/) on the k8s cluster."
        #  key: thanos_install
        #  widget: switch
        #  type: boolean
        #  default: false

  - name: Prometheus
    groups:
    - name: Prometheus login
      condition: $prometheus_install == true
      technologies: [terraform]
      vars:
        - name: "Prometheus DNS"
          description: "DNS to use for Prometheus."
          key: module.kube-prometheus.prometheus_domain_name
          widget: simple_text
          type: string
          default: prometheus.local
    - name: General Configuration
      condition: $prometheus_install == true
      technologies: [terraform]
      vars:
        - name: "Prometheus scraping extra config"
          description: "Prometheus scraping extra config to use. TODO "
          key: module.kube-prometheus.prometheus_additional_scrape
          widget: text_area
          type: map

  - name: Blackbox Exporter
    groups:
    - name: Install
      technologies: [terraform]
      vars:
        - name: "Blackbox exporter install"
          description: "Wheter to install [blackbox exporter](https://github.com/prometheus-community/ansible/tree/main/roles/blackbox_exporter) on the machine as a service."
          key: module.prometheus-blackbox-exporter.blackbox_exporter_install
          widget: switch
          type: boolean
          default: false

    - name: Configuration
      condition: $module.prometheus-blackbox-exporter.blackbox_exporter_install == true
      technologies: [terraform]
      vars:
        - name: "Blackbox exporter modules"
          description: "Blackbox exporter modules to be used, for more information please check the [official documentation](https://github.com/prometheus/blackbox_exporter/blob/master/CONFIGURATION.md)"
          key: module.prometheus-blackbox-exporter.blackbox_exporter_modules
          widget: text_area
          type: map
          default:
            http_2xx:
              prober: http
              timeout: 15s
              http:
                method: GET
                valid_http_versions:
                  - HTTP/1.1
                  - HTTP/2.0
                fail_if_not_ssl: true
                no_follow_redirects: false
                preferred_ip_protocol: ip4

  - name: Alertmanager
    groups:
    - name: Alertmanager DNS
      condition: $alertmanager_install == true
      technologies: [terraform]
      vars:
        - name: "Alertmanager DNS"
          description: "DNS to use for Alertmanager."
          key: module.kube-prometheus.alertmanager_domain_name
          widget: simple_text
          type: string
          default: alertmanager.local
    - name: Alertmanager Configuration
      technologies: [terraform]
      condition: $alertmanager_install == true
      vars:
        - name: "Alertmanager route"
          description: "Customize the default enabled rules. For more information about syntax and default rules check the k8s prometheus stack [chart default values](https://github.com/prometheus-community/helm-charts/blob/main/charts/kube-prometheus-stack/values.yaml#L38)"
          key: module.kube-prometheus.alertmanager_customRules
          widget: text_area
          type: map
        - name: "Alertmanager additional rules"
          description: "Provide custom rules to be deployed in the cluster. For more information about syntax and default rules check the k8s prometheus stack [chart default values](https://github.com/prometheus-community/helm-charts/blob/main/charts/kube-prometheus-stack/values.yaml#L198)"
          key: module.kube-prometheus.alertmanager_additional_rules
          widget: text_area
          type: map
        - name: "Alertmanager config"
          description: "Alertmanager configuration. Note! The default value corresponds to the helm chart default value for the config of alertmanager. For more information about syntax check the [official alertmanager documentation](https://prometheus.io/docs/alerting/configuration/#configuration-file)"
          key: module.kube-prometheus.alertmanager_config
          widget: text_area
          type: map
          default:
            global:
              resolve_timeout: 5m
            inhibit_rules:
              - source_matchers:
                  - 'severity = critical'
                target_matchers:
                  - 'severity =~ warning|info'
                equal:
                  - 'namespace'
                  - 'alertname'
              - source_matchers:
                  - 'severity = warning'
                target_matchers:
                  - 'severity = info'
                equal:
                  - 'namespace'
                  - 'alertname'
              - source_matchers:
                  - 'alertname = InfoInhibitor'
                target_matchers:
                  - 'severity = info'
                equal:
                  - 'namespace'
              - target_matchers:
                  - 'alertname = InfoInhibitor'
            route:
              group_by: ['namespace']
              group_wait: 30s
              group_interval: 5m
              repeat_interval: 12h
              receiver: 'null'
              routes:
              - receiver: 'null'
                matchers:
                  - alertname = "Watchdog"
            receivers:
            - name: 'null'
            templates:
            - '/etc/alertmanager/config/*.tmpl'

    - name: External Alertmanager (not deployed in k8s cluster)
      technologies: [pipeline]
      condition: $alertmanager_install == false && $prometheus_install == true
      vars:
        - name: "External endpoint"
          description: "External alertmanager endpoints to be used to send prometheus alerts. You should create a credential that allows to specify how to connet to it. For more information on the parameters check the [following link](https://github.com/prometheus-operator/prometheus-operator/blob/main/Documentation/api.md#alertmanagerendpoints)"
          key: alertmanager_use_external
          widget: cy_cred
          type: string

  - name: Grafana
    groups:
    - name: Grafana DNS
      condition: $grafana_install == true
      technologies: [terraform]
      vars:
        - name: "Grafana DNS"
          description: "DNS to use for Grafana."
          key: module.kube-prometheus.grafana_domain_name
          widget: simple_text
          type: string
          default: grafana.local

    - name: Grafana Configuration
      technologies: [terraform]
      condition: $grafana_install == true
      vars:
        - name: Use default grafana dashboards
          description: "Wheter to use of not the default grafana dashboards"
          key: module.kube-prometheus.enable_default_grafana_dashboards
          widget: switch
          type: boolean
          default: true
        - name: "Grafana Dashboard Timezone"
          description: "Timezone for the default dashboards"
          key: module.kube-prometheus.grafana_default_timezone
          type: string
          widget: simple_text
          default: Europe/France

#  - name: Thanos
#    groups:
#    - name: Thanos DNS
#      condition: $thanos_install == true
#      technologies: [terraform]
#      vars:
#        - name: "Thanos DNS"
#          description: "DNS to use for Thanos."
#          key: module.thanos.thanos_domain_name
#          widget: simple_text
#          type: string
#          default: thanos.local
#
#    - name: Thanos Configuration
#      technologies: [terraform]
#      condition: $thanos_install == true
#      vars:
#        - name: Raw retention
#          description: "Retention amount for data at the same ingestion rate as scraping interval. The value should be in the format 1d, 1w, 1m, 1y"
#          key: module.thanos.retentionResolutionRaw
#          widget: simple_text
#          type: string
#        - name: 5min retention
#          description: "Retention amount for data at 5 min intervals. The value should be in the format 1d, 1w, 1m, 1y"
#          key: module.thanos.retentionResolution5m
#          widget: simple_text
#          type: string
#        - name: 1h retention
#          description: "Retention amount for data at 1 hour intervals. The value should be in the format 1d, 1w, 1m, 1y"
#          key: module.thanos.retentionResolution1h
#          widget: simple_text
#          type: string
  - *advanced

  - name: Optional parameters
    groups:
    - name: Other k8s parameters
      condition: $advanced_opt == true
      technologies: [terraform]
      vars:
        - name: "Extra tags"
          description: "Dict of extra tags to add to cluster resources crated."
          key: extra_tags
          widget: text_area
          type: map
          default: {}
        - name: "Opsgenie gateway install"
          description: "Wheter to install [opsgenie gateway](https://hub.docker.com/r/cycloid/opsgenie-heartbeat-gw) on the k8s cluster."
          key: module.opsgenie-heartbeat.opsgenie_heartbeat_install
          widget: switch
          type: boolean
          default: false
        - name: "K8s node selector"
          description: "The k8s node selector to be used to select in which node to deploy the different resources. More information in the [k8s official pages](https://kubernetes.io/docs/user-guide/node-selection/)"
          key: stack_monitoring_node_selector
          widget: text_area
          type: map
          default: {}

    - name: Opsgenie gateway configuration
      condition: $advanced_opt == true && $module.opsgenie-heartbeat.opsgenie_heartbeat_install == true
      technologies: [terraform]
      vars:
        - name: "Heartbeat Access Token"
          description: "Opsgenie heartbeat access token"
          key: module.opsgenie-heartbeat.opsgenie_token
          widget: cy_cred
          type: string