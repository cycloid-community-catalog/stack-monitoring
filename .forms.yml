shared:
- &advanced
  name: Advanced
  groups:
  - name: Enable Advanced
    technologies: [pipeline]
    vars:
      - name: Display stack advanced options
        description: Check to see stack options.
        key: advanced_opt
        widget: switch
        type: boolean
        default: false
  - name: Version selection
    condition: $advanced_opt == true
    technologies: [pipeline, ansible]
    vars:
      - name: "Terraform version"
        description: "Terraform version to use."
        key: terraform_version
        widget: simple_text
        type: string
        default: "1.6.3"
      - name: "Ansible version"
        description: "Ansible version to use."
        key: ansible_version
        widget: simple_text
        type: string
        default: "10.1"
      - name: "Prometheus version"
        description: "Prometheus version to use."
        key: prometheus_version
        widget: simple_text
        type: string
        default: "latest"
      - name: "Alertmananager version"
        description: "Alertmanager version to use."
        key: alertmanager_version
        widget: simple_text
        type: string
        default: "latest"
      - name: "Grafana version"
        description: "Grafana version to use."
        key: grafana_version
        widget: simple_text
        type: string
        default: "latest"
      - name: "Blaxkbox exporter version"
        description: "Blackbox exporter version to use."
        key: blackbox_exporter_version
        widget: simple_text
        type: string
        default: "0.25.0"
        #TODO others

  - name: NGINX configuration
    condition: $advanced_opt == true
    technologies: [ansible]
    vars:
      - name: "Enable Nginx HTTPs"
        description: "Select wheter to enable HTTPs traffic and using SSL certificates."
        key: use_ssl
        type: boolean
        widget: switch
        default: true

  - name: SSL configuration
    condition: $advanced_opt == true && $use_ssl == true
    technologies: [ansible]
    vars:
      - name: "Create self signed certificate"
        description: "Wheter to create a self signed certificate automatically in the VM. Otherwise a certificate needs to be imported"
        key: create_self_signed_certificate
        type: boolean
        widget: switch
        default: true

  - name: SSL configuration
    condition: $advanced_opt == true && create_self_signed_certificate == false
    technologies: [pipeline]
    vars:
      - name: "Nginx certificate"
        description: "Credential containing nginx certificate to be used by server"
        key: nginx_certificate
        type: string
        widget: cy_cred
      - name: "Nginx certificate key"
        description: "Credential containing nginx certificate to be used by server"
        key: nginx_certificate_key
        type: string
        widget: cy_cred

  - name: DNS Creation
    condition: $advanced_opt == true
    technologies: [terraform]
    vars:
      - name: Create DNS
        description: Wheter to create DNS records for prometheus, alertmanager and grafana using AWS DNS. Note! Requires a DNS Zone
        key: create_dns
        widget: switch
        type: boolean
        default: false
  - name: DNS Zone
    technologies: [terraform]
    condition: $advanced_opt == true && $create_dns == true
    vars:
      - name: " AWS Route53 Zone"
        description: "AWS Route53 Zone name to use for creating the different monitoring records."
        key: aws_dns_zone_name
        widget: simple_text
        type: string
        default: ""

- &aws-creds
  name: AWS Credentials
  groups:
  - name: Setup
    technologies: [pipeline]
    vars:
      - name: "AWS access key"
        description: "Amazon AWS access key for Terraform."
        key: aws_access_key
        widget: cy_cred
        type: string
        default: "((aws.access_key))"
      - name: "AWS secret key"
        description: "Amazon AWS secret key for Terraform."
        key: aws_secret_key
        widget: cy_cred
        type: string
        default: "((aws.secret_key))"
      - name: "AWS Assume Role"
        description: "Amazon AWS access key for Terraform."
        key: aws_role_arn
        widget: simple_text
        type: string
        default: ""
      - name: "Amazon AWS region"
        description: "Amazon AWS region to use for Terraform."
        key: aws_default_region
        widget: auto_complete
        type: string
        values: ["eu-north-1","ap-south-1","eu-west-3","eu-west-2","eu-west-1","ap-northeast-2","ap-northeast-1","sa-east-1","ca-central-1","ap-southeast-1","ap-southeast-2","eu-central-1","us-east-1","us-east-2","us-west-1","us-west-2"]
        default: eu-west-1
version: "2"
use_cases:
- name: aws-vm
  sections:
  - *aws-creds
  - name: VM Configuration
    groups:
    - name: General
      technologies: [terraform]
      vars:
        - name: "Instance type"
          description: "Instance type for the worker."
          key: vm_size
          widget: auto_complete
          type: string
          default: "t3.small"
          values:
            - "t3.small"
            - "t3.medium"
            - "t3.large"
            - "t3.xlarge"
            - "t3.2xlarge"
        - name: "Disk size"
          unit: Go
          description: "Root Disk size for the instance."
          key: os_disk_size
          widget: slider_range
          type: integer
          default: 30
          values:
              - 30
              - 250
        - name: "Subnet ID"
          description: "Subnet ID where to create VM."
          key: subnet_id
          widget: simple_text
          type: string
          required: true
        - name: "VPC ID"
          description: "VPC ID where to create VM."
          key: vpc_id
          widget: simple_text
          type: string
          required: true

    - name: SSH configuration
      technologies: [pipeline]
      vars:
        - name: "Use Bastion"
          description: "Select wheter to use a Bastion to SSH instance"
          key: use_bastion
          type: boolean
          widget: switch
          default: true
        - name: "Create ssh keypair"
          description: "Wheter to create an aws keypair."
          key: create_keypair
          widget: switch
          type: boolean
          default: false
        - name: "SSH Keypair name"
          description: "Name of the SSH pairkey to use in AWS"
          key: keypair_name
          type: string
          widget: simple_text
          required: true
        - name: "SSH private Key"
          description: "SSH private key to use to connect to the machine."
          key: ssh_private_key
          widget: cy_cred
          type: string
          required: true

    - name: SSH public key to create keypair
      condition: $create_keypair == true
      technologies: [terraform]
      vars:
        - name: "SSH public key"
          description: "SSH public key to use to create the key in AWS."
          key: ssh_public_key
          widget: cy_cred
          type: string
          default: ""

    - name: Bastion SSH connection
      condition: $use_bastion == true
      technologies: [terraform]
      vars:
        - name: "Bastion Security Group"
          description: "Security group ID of the bastion to allow SSH access."
          key: bastion_sg_allow
          widget: simple_text
          type: string

    - name: No Bastion - SSH access
      condition: $use_bastion == false
      technologies: [terraform]
      vars:
        - name: "SSH CIDRs to allow"
          description: "List of CIDRs to allow."
          key: ssh_ips_to_allow
          widget: text_area
          type: array
          default: []

    - name: Advanced Scraping
      condition: $advanced_opt == true
      technologies: [terraform]
      vars:
        - name: "VPCs to scrape"
          description: "Array of VPCs to enable scraping. To allow the creation of the corresponding security groups to be used. TODO default"
          key: vpcs_to_scrape
          widget: text_area
          type: array
          default: []
        - name: "Extra ports to scrape"
          description: "Array of other ports to scrape in the machine. To allow th creation of the corresponding security groups to be used in the prometheus machine."
          key: scraping_ports
          widget: text_area
          type: array
          default: []

    - name: Optional VM parameters
      condition: $advanced_opt == true
      technologies: [terraform]
      vars:
        - name: "Extra IAM policies"
          description: "List of extra IAM policies to associate to the VM. Defaults here TODO"
          key: optional_iam_policies
          widget: text_area
          type: array
          default: []
        - name: "Extra tags"
          description: "Dict of extra tags to add to resources."
          key: extra_tags
          widget: text_area
          type: map
          default: {}

  - name: Monitoring tools
    groups:
    - name: Tools to skip install
      technologies: [terraform, ansible]
      vars:
        - name: "Skip Grafana install"
          description: "Wheter to skip install Prometheus on the machine. To install select false"
          key: grafana_skip_install
          widget: switch
          type: boolean
          default: true
        - name: "Skip Alertmanager install"
          description: "Wheter to skip install Prometheus on the machine. To install select false"
          key: alertmanager_skip_install
          widget: switch
          type: boolean
          default: false
        - name: "Skip Prometheus install"
          description: "Wheter to skip install Prometheus on the machine. To install select false"
          key: prometheus_skip_install
          widget: switch
          type: boolean
          default: false

  - name: Exporters
    groups:
    - name: Select exporters to install
      technologies: [ansible]
      vars:
        - name: "Skip Blackbox exporter install"
          description: "Wheter to skip install blackbox exporter on the machine. To install select false"
          key: blackbox_exporter_skip_install
          widget: switch
          type: boolean
          default: false
        - name: "Skip MYSQL exporter install"
          description: "Wheter to skip install mysql exporter TODO link on the machine. To install select false"
          key: mysqld_exporter_skip_install
          widget: switch
          type: boolean
          default: true
        - name: "Skip Postgres exporter install"
          description: "Wheter to skip install postgres exporter TODO link  on the machine. To install select false"
          key: postgres_exporter_skip_install
          widget: switch
          type: boolean
          default: true
        - name: "Skip Process exporter install"
          description: "Wheter to skip install postgres exporter TODO link  on the machine. To install select false"
          key: process_exporter_skip_install
          widget: switch
          type: boolean
          default: false
        - name: "Skip Systemd exporter install"
          description: "Wheter to skip install systemd exporter TODO link  on the machine. To install select false"
          key: systemd_exporter_skip_install
          widget: switch
          type: boolean
          default: false
        - name: "Skip Node exporter install"
          description: "Wheter to skip install node exporter TODO link  on the machine. To install select false"
          key: node_exporter_skip_install
          widget: switch
          type: boolean
          default: false

  - name: Prometheus
    groups:
    - name: Prometheus login
      condition: $prometheus_skip_install == false
      technologies: [pipeline]
      vars:
        - name: "Prometheus DNS"
          description: "DNS to use for Prometheus."
          key: prometheus_domain_name
          widget: simple_text
          type: string
          default: prometheus.local
        - name: "Prometheus weblogin"
          description: "Htpasswd can be generated using `htpasswd -nb user password`"
          key: prometheus_web_login
          type: string
          widget: cy_cred
    - name: General Configuration
      condition: $prometheus_skip_install == false
      technologies: [ansible]
      vars:
        - name: "Prometheus scraping config"
          description: "Prometheus scraping config to use. Note! prometheus and alertmanager are scraped. By default For more information check [prometheus wiki](https://prometheus.io/docs/prometheus/latest/configuration/configuration/)"
          key: prometheus_custom_configs
          widget: text_area
          type: array
          default:
            ## Node_exporter
            - job_name: 'Node_exporter'
              scheme: http
              ec2_sd_configs:
              - region: "{{ aws_default_region }}"
                port: 9100

              relabel_configs:
              - source_labels: [__meta_ec2_tag_monitoring_discovery]
                action: drop
                regex: false

              - source_labels: [__meta_ec2_private_ip]
                regex: '^(.+)$'
                replacement: '${1}:9100'
                target_label: __address__

              # Force labels on metrics
              # Instance label : Public IP, if not, default private IP
              - source_labels: [__meta_ec2_private_ip]
                action: replace
                target_label: instance
              - source_labels: [__meta_ec2_public_ip]
                regex: '^(.+)$'
                replacement: '${1}'
                target_label: instance

              # Get some ec2 labels
              - source_labels: [__meta_ec2_tag_Name]
                target_label: Name
              - source_labels: [__meta_ec2_tag_project]
                target_label: project
              - source_labels: [__meta_ec2_tag_env]
                target_label: env
              - source_labels: [__meta_ec2_tag_role]
                target_label: role
              - source_labels: [__meta_ec2_tag_customer]
                target_label: customer
              - source_labels: [__meta_ec2_availability_zone]
                target_label: availability_zone
              - source_labels: [__meta_ec2_instance_id]
                target_label: instance_id

              metric_relabel_configs:
              # Don't store unwanted metrics
              - source_labels: [__name__]
                action: drop
                regex: go_(.*)

              # Overrides mechanism of ec2 labels on the metric scope
              - source_labels: [cycloid_tag_Name]
                regex: '(.+)'
                target_label: Name
              - source_labels: [cycloid_tag_project]
                regex: '(.+)'
                target_label: project
              - source_labels: [cycloid_tag_env]
                regex: '(.+)'
                target_label: env
              - source_labels: [cycloid_tag_role]
                regex: '(.+)'
                target_label: role
              - source_labels: [cycloid_tag_customer]
                regex: '(.+)'
                target_label: customer
              - source_labels: [cycloid_tag_availability_zone]
                regex: '(.+)'
                target_label: availability_zone
              - source_labels: [cycloid_tag_instance_id]
                regex: '(.+)'
                target_label: instance_id

              # Remove cycloid_tag_* labels
              - regex: 'cycloid_tag_.*'
                action: labeldrop
        - name: "Prometheus custom rules"
          description: "Definition of custom prometheus rules that will be saved at templates/rules/$customer.rules file"
          key: prometheus_custom_rules
          widget: text_area
          type: array
          default: []
        # temporary remove
        #- name: "Prometheus rules"
        #  description: "Definition of prometheus rules. Other default available in the role ansible-prometheus/templates/rules, you can also create news and add to the config repository."
        #  key: prometheus_rule_files
        #  widget: text_area
        #  type: array
        #  default:
        #    - templates/rules/opsgenie.rules

  - name: Alertmanager
    groups:
    - name: Alertmanager login
      condition: $alertmanager_skip_install == false
      technologies: [pipeline]
      vars:
        - name: "Alertmanager DNS"
          description: "DNS to use for Alertmanager."
          key: alertmanager_domain_name
          widget: simple_text
          type: string
          default: alertmanager.local
        - name: "Alertmanager weblogin"
          description: "Htpasswd can be generated using `htpasswd -nb user password`"
          key: alertmanager_web_login
          type: string
          widget: cy_cred
    - name: Alertmanager Configuration
      technologies: [ansible]
      condition: $alertmanager_skip_install == false
      vars:
      #TODO change to password
        - name: "Alertmanager SMTP"
          description: "The SMTP to be used by alertmanager, as specified in the oficial documentation [here](TODO)."
          key: alertmanager_smtp
          widget: text_area
          type: map
          default:
            smarthost: 'smtp.gmail.com:587'
            from: 'foo@bar.com'
            auth_username: 'foo@bar.com'
            auth_password: 'barfoo'
        - name: "Alertmanager route"
          description: "The root node of the routing tree, as specified in the oficial documentation [here](TODO)."
          key: alertmanager_route
          widget: text_area
          type: map
          default:
            receiver: default
            group_by:
              - customer
              - project
              - env
              - alertname
            group_wait: 30s
            group_interval: 5m
            repeat_interval: 15m
            routes:
            - match:
                receiver: 'null'
              receiver: dev_null

            - match:
                receiver: email
                severity: critical
              receiver: default
        - name: "Alertmanager inhibition rules"
          description: "A list of inhibition rules, as specified in the oficial documentation [here](TODO)."
          key: alertmanager_inhibit_rules
          widget: text_area
          type: array
          default:
            - source_match:
                severity: critical
              target_match:
                severity: warning
              equal:
                - instance
                - customer
                - project
                - env
                - alertname
        - name: "Alertmanager receivers"
          description: "A list of notification receivers., as specified in the oficial documentation [here](TODO)."
          key: alertmanager_receivers
          widget: text_area
          type: array
          default:
            - name: 'default'
              email_configs:
              - to: "foo@bar.com"
                # Whether or not to notify about resolved alerts.
                send_resolved: true

            - name: 'dev_null'
              # Deliberately left empty to not deliver anywhere.
    - name: External Alertmanager
      technologies: [pipeline]
      condition: $alertmanager_skip_install == true && $prometheus_skip_install == false
      vars:
        - name: "Username"
          description: "Basic authentification username to use to connect to external alertmanager"
          key: external_alertmanager_username
          widget: cy_cred
          type: string
        - name: "Password"
          description: "Basic authentification passowrd to use to connect to external alertmanager"
          key: external_alertmanager_password
          widget: cy_cred
          type: string
        - name: "External Alertmanager list"
          description: "Map of targets to connect to external alertmanager. Examples [here](TODO)"
          key: external_alertmanager_targets
          widget: text_area
          type: map

  - name: Blackbox Exporter
    groups:
    - name: Configuration
      condition: $blackbox_exporter_skip_install == false
      technologies: [ansible]
      vars:
        - name: "Blackbox exporter modules"
          description: "Blackbox exporter modules to be used, for more information please check the [official documentation](https://github.com/prometheus/blackbox_exporter/blob/master/CONFIGURATION.md)"
          key: blackbox_exporter_configuration_modules
          widget: text_area
          type: map
          default:
            http_2xx:
              prober: http
              timeout: 15s
              http:
                fail_if_not_ssl: true
                method: GET
                no_follow_redirects: false
                preferred_ip_protocol: ip4
                valid_http_versions:
                  - HTTP/1.1
                  - HTTP/2.0
        - name: "Prometheus blackbox scraping"
          description: "Blackbox scraping configuration to be added to prometheus, for more information please check the [official documentation](https://github.com/prometheus/blackbox_exporter/tree/master)"
          key: prometheus_blackbox_config
          widget: text_area
          type: array
          default:
            - job_name: 'blackbox-targets'
              params:
                module: [http_2xx]
              metrics_path: /probe
              relabel_configs:
                - source_labels: [ "__address__" ]
                  target_label: "__param_target"
                - target_label: "__address__"
                  replacement: "localhost:9115"
              static_configs:
                - targets: ["https://cycloid.io"]
                  labels:
                    Name: "Name"
                    customer: "{{customer}}"
                    project: "website"
                    env: "prod"
  - *advanced


  - name: Grafana
    groups:
    - name: Grafana login
      condition: $grafana_skip_install == false
      technologies: [pipeline]
      vars:
        - name: "Grafana DNS"
          description: "DNS to use for Grafana."
          key: grafana_domain_name
          widget: simple_text
          type: string
          default: grafana.local
        - name: "Grafana weblogin"
          description: "Htpasswd can be generated using `htpasswd -nb user password`"
          key: grafana_web_login
          type: string
          widget: cy_cred
        - name: "Grafana Admin Password"
          description: "Grafana admin password to use for the local db and the service"
          key: grafana_admin_pwd
          type: string
          widget: cy_cred
        - name: "Grafana Admin User"
          description: "Grafana admin user to use for the local db and the service"
          key: grafana_admin_user
          type: string
          widget: cy_cred
        # cannot have map cy_creds
        #- name: "Grafana Datasources"
        #  description: "Grafana "
        #  key: grafana_extra_datasources
        #  type: map
        #  widget: cy_cred
    - name: Grafana Configuration
      technologies: [ansible]
      condition: $grafana_skip_install == false
      vars:
        - name: "Grafana Dashboards"
          description: "List of dashboards which should be imported by ID, available publicly atnod [grafana](https://grafana.com/grafana/dashboards/)"
          key: grafana_dashboards
          type: array
          widget: text_area
          default:
            - dashboard_id: 1860
              revision_id: 37
              datasource: prometheus
            - dashboard_id: 13882
              revision_id: 10
              datasource: prometheus
            - dashboard_id: 1617
              revision_id: 1
              datasource: prometheus
            - dashboard_id: 13659
              revision_id: 1
              datasource: prometheus
