
definitions:
  tasks:
    # The task producing a configured stack, merging stack and config.
    - &task-merge-stack-and-config
      task: merge-stack-and-config
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: cycloid/cycloid-toolkit
            tag: latest
        run:
          path: /bin/bash
          args:
          - '-ec'
          - |
            echo -e "${KUBECONFIG_CONTENT}" > stack/terraform/k8s/${KUBECONFIG_FILENAME}
            /usr/bin/merge-stack-and-config
        inputs:
          - name: git_config_terraform
            path: "config"
          - name: git_stack_terraform
            path: "stack"
        outputs:
          - name: merged-stack
            path: "merged-stack"
      params:
        CONFIG_PATH: ($ .project $)/terraform/($ .environment $)
        STACK_PATH: terraform/aws-vm
        KUBECONFIG_CONTENT: ((kubeconfig_content))
        KUBECONFIG_FILENAME: ((kubeconfig_filename))
        #($- if eq .use_case "aws-vm" $)
#($- else if eq .use_case "azure-vm" $)
#        CONFIG_PATH: ((project))/terraform/((env))
#        STACK_PATH: terraform/azure-vm
#($- end $)

resource_types:
- name: terraform
  type: docker-image
  source:
    repository: cycloid/terraform-resource
    tag: ((terraform_version))

groups:
- name: setup
  jobs:
  - creds-creation
  - terraform-plan
  - terraform-apply

- name: destroy
  jobs:
  - terraform-destroy
  - clean-vm-credential

resources:
- name: tfstate
  type: terraform
  source:
    backend_config:
      address: '($ .api_url $)/inventory?jwt=($ .inventory_jwt $)'
      ## skip_cert_verification needs to be enabled when using self signed certificates.
      # skip_cert_verification: true
    backend_type: http
    env_name: ($ .environment $)
    vars:
      env: ($ .environment $)
      project: ($ .project $)
      organization: ($ .organization_canonical $)
      kubeconfig_filename: ((kubeconfig_filename))
      enable_tls: ((enable_tls))
      tls_crt: ((tls_crt)) ##todo check
      tls_key: ((tls_key)) ##todo how to manage certs
      prometheus_basic_auth_username: ((((prometheus_cred)).user))
      prometheus_basic_auth_password: ((((prometheus_cred)).pwd))
      grafana_admin_password: ((((grafana_cred)).admin_pwd))
      grafana_basic_auth_username: ((((grafana_cred)).admin_user))
      grafana_basic_auth_password: ((((grafana_cred)).admin_pwd))
      alertmanager_basic_auth_username: ((((alertmanager_cred)).user))
      alertmanager_basic_auth_password: ((((alertmanager_cred)).pwd))
      opsgenie_token: ((opsgenie_token))
      thanos_basic_auth_username: ((((thanos_cred)).user))
      thanos_basic_auth_password: ((((thanos_cred)).pwd))

- name: git_stack_terraform
  type: git
  icon: github-circle
  source:
    uri: https://github.com/cycloid-community-catalog/stack-monitoring.git
    branch: ($ .scs_branch $)
    # Include only the Terraform files in the specified directory.
    paths:
      - terraform/k8s/*

- name: git_config_terraform
  type: git
  icon: github-circle
  source:
    uri: ($ .cr_url $)
    branch: ($ .cr_branch $)
#($- if eq .cr_cred_type "basic_auth" $)
#    username: ((($ .cr_cred_path $).username))
#    password: ((($ .cr_cred_path $).password))
#($- else $)
    private_key: ((($ .cr_cred_path $).ssh_key))
#($- end $)
    # Include only the Terraform files in the specified directory.
    paths:
      - ($ .project $)/terraform/($ .environment $)/*

jobs:
  - name: creds-creation
    build_logs_to_retain: 10
    plan:
    - do:
      - get: git_config_terraform
        trigger: true
      - task: creds-creation
        config:
          platform: linux
          image_resource:
            type: docker-image
            source:
              repository: cycloid/cycloid-toolkit
              tag: "v((ansible_version))"
          run:
            path: /bin/bash
            args:
              - '-ec'
              - |
                # login to cli
                cy login --org $ORG > /dev/null 2>&1

                # required for htpasswd command
                apk add apache2-utils -q  > /dev/null

                # check for prometheus
                if [ "$PROMETHEUS_INSTALL" = "true" ]; then

                  echo "Checking credentials for prometheus..."

                  # check if credential exists
                  if [[ -z $(cy --org "$ORG"credential list -o json -o json 2>/dev/null | jq -r ".[] | select(.canonical == \"$PROMETHEUS_CREDENTIAL\") | .canonical") ]]; then

                      echo "Credential '$PROMETHEUS_CREDENTIAL' does not exist. Creating..."

                      prometheus_user=$ORG
                      prometheus_password=$(openssl rand -base64 32)

                      cy --org "$ORG" credential create custom \
                          --path "$PROMETHEUS_CREDENTIAL" \
                          --name "$PROMETHEUS_CREDENTIAL" \
                          --field "user=$prometheus_user" \
                          --field "pwd=$prometheus_password" > /dev/null 2>&1

                      echo "Credential created."
                  fi
                fi

                # check for alertmanager
                if [ "$ALERTMANAGER_INSTALL" = "true" ]; then

                  echo -e "\nChecking credentials for alertmanager..."

                  # check if credential exists
                  if [[ -z $(cy --org "$ORG"credential list -o json 2>/dev/null | jq -r ".[] | select(.canonical == \"$ALERTMANAGER_CREDENTIAL\") | .canonical") ]]; then

                      echo "Credential '$ALERTMANAGER_CREDENTIAL' does not exist. Creating..."

                      alertmanager_user=$ORG
                      alertmanager_password=$(pwgen -scny 16 1 | tr -d '"\\')

                      cy --org "$ORG" credential create custom \
                          --path "$ALERTMANAGER_CREDENTIAL" \
                          --name "$ALERTMANAGER_CREDENTIAL" \
                          --field "user=$alertmanager_user" \
                          --field "pwd=$alertmanager_password" > /dev/null 2>&1

                      echo "Credential created."
                  fi
                fi

                # check for grafana
                if [ "$GRAFANA_INSTALL" = "true" ]; then

                  echo -e "\nChecking credentials for grafana..."

                  # check if credential exists
                  if [[ -z $(cy --org "$ORG"credential list -o json 2>/dev/null | jq -r ".[] | select(.canonical == \"$GRAFANA_CREDENTIAL\") | .canonical") ]]; then

                      echo "Credential '$GRAFANA_CREDENTIAL' does not exist. Creating..."

                      grafana_admin_user="admin"
                      grafana_admin_pwd=$(openssl rand -base64 32)

                      cy --org "$ORG" credential create custom \
                          --path "$GRAFANA_CREDENTIAL" \
                          --name "$GRAFANA_CREDENTIAL" \
                          --field "admin_user=$grafana_admin_user" \
                          --field "admin_pwd=$grafana_admin_pwd"

                      echo "Credential created."
                  fi
                fi

                # check for thanos
                if [ "$THANOS_INSTALL" = "true" ]; then

                  echo -e "\nChecking credentials for thanos..."

                  # check if credential exists
                  if [[ -z $(cy --org "$ORG"credential list -o json 2>/dev/null | jq -r ".[] | select(.canonical == \"$THANOS_CREDENTIAL\") | .canonical") ]]; then

                      echo "Credential '$THANOS_CREDENTIAL' does not exist. Creating..."

                      thanos_admin_user="admin"
                      thanos_admin_pwd=$(openssl rand -base64 32)

                      cy --org "$ORG" credential create custom \
                          --path "$THANOS_CREDENTIAL" \
                          --name "$THANOS_CREDENTIAL" \
                          --field "user=$grafana_admin_user" \
                          --field "pwd=$grafana_admin_pwd"

                      echo "Credential created."
                  fi
                fi
                #todo ssl management
        params:
          CY_API_KEY: ((cycloid_api_key))
          PROMETHEUS_INSTALL: ((prometheus_install))
          PROMETHEUS_CREDENTIAL: ((prometheus_cred))
          ALERTMANAGER_INSTALL: ((alertmanager_install))
          ALERTMANAGER_CREDENTIAL: ((alertmanager_cred))
          GRAFANA_INSTALL: ((grafana_install))
          GRAFANA_CREDENTIAL: ((grafana_cred))
          THANOS_INSTALL: ((thanos_install))
          THANOS_CREDENTIAL: ((thanos_cred))
          ORG: ($ .organization_canonical $)
          ENV: ($ .environment $)
          PROJECT: ($ .project $)

  - name: terraform-plan
    serial: true
    serial_groups: [terraform]
    max_in_flight: 1
    build_logs_to_retain: 10
    plan:
      - do:
        - get: git_stack_terraform
          trigger: true
        - get: git_config_terraform
          trigger: true
          passed:
            - creds-creation
        - *task-merge-stack-and-config
        - put: tfstate
          params:
            plan_only: true
            terraform_source: merged-stack/

  - name: terraform-apply
    serial: true
    serial_groups: [terraform]
    build_logs_to_retain: 10
    plan:
      - do:
        - get: git_stack_terraform
          trigger: false
          passed:
            - terraform-plan
        - get: git_config_terraform
          trigger: false
          passed:
            - terraform-plan
        - get: tfstate
          trigger: false
          passed:
            - terraform-plan
        - *task-merge-stack-and-config
        - put: tfstate
          params:
            plan_run: true
            terraform_source: merged-stack/


# todo check minikube access
#  - name: access-mgmt
#    build_logs_to_retain: 10
#    plan:
#    - do:
#      - get: tfstate
#        trigger: false
#        passed:
#          - deploy
#
#      - task: show-creds
#        config:
#          platform: linux
#          image_resource:
#            type: docker-image
#            source:
#              repository: cycloid/cycloid-toolkit
#              tag: latest
#          run:
#            path: /bin/bash
#            args:
#              - '-exc'
#              - |
#                # Define color codes
#                GREEN='\033[0;32m'
#                BLUE='\033[0;34m'
#                YELLOW='\033[0;33m'
#                RED='\033[0;31m'
#                NC='\033[0m' # No Color
#
#                # Display connection credentials
#                echo "${GREEN}Here are your connection credentials:${NC}"
#
#                echo "${BLUE}External Alertmanager Username:${NC} $external_alertmanager_username"
#                echo "${BLUE}External Alertmanager Password:${NC} $external_alertmanager_password"
#                echo "${BLUE}External Alertmanager Targets:${NC} $external_alertmanager_targets"
#                echo ""
#                echo "${YELLOW}Remember to keep these credentials safe!${NC}"
#                echo ""
#                echo "${RED}Command Tips for Troubleshooting:${NC}"
#                echo "  1. If you encounter issues, check your connection using the following command:"
#                echo "     - curl -u \"$external_alertmanager_username:$external_alertmanager_password\" $external_alertmanager_targets"
#                echo "  2. Verify the AWS region and ensure your permissions are correctly set."
#                echo "  3. Use 'echo' to debug your variables:"
#                echo "     - echo \"Environment: \$env\""
#                echo "  4. If using Ansible, run the playbook with increased verbosity:"
#                echo "     - ansible-playbook playbook.yml -vvvv"
#                echo ""
#                echo "${GREEN}Happy connecting!${NC}"

  - name: terraform-destroy
    serial: true
    serial_groups: [terraform]
    build_logs_to_retain: 10
    plan:
      - do:
          - get: git_stack_terraform
            trigger: false
          - get: git_config_terraform
            trigger: false
          - *task-merge-stack-and-config
          - put: tfstate
            params:
              action: destroy
              terraform_source: merged-stack/
            get_params:
              action: destroy

  - name: clean-vm-credential
    serial_groups: [terraform]
    build_logs_to_retain: 3
    plan:
    - do:
      - get: git_config_terraform
        trigger: true
        passed:
          - terraform-destroy

      - task: clean-cred
        config:
          platform: linux
          image_resource:
            type: registry-image
            source:
              repository: cycloid/cycloid-toolkit
              tag: latest
          run:
            path: /bin/bash
            args:
            - -ec
            - |
              # login to cli
              cy login --org $ORG > /dev/null 2>&1

              delete_credential_if_exists() {
                  # $1 is org, $2 is credential name

                  # Check if the credential exists
                  CRED=$(cy --org "$1" credential list -o json | jq -r ".[] | select(.canonical == \"$2\") | .canonical")

                  if [[ -n "$CRED" ]]; then
                      # Delete the credential if it exists
                      if cy --org "$1" credential delete --canonical "$2"; then
                          echo "Credential [$2]: removed"
                      else
                          echo "Failed to remove credential [$2]" >&2
                      fi
                  else
                      echo "Credential [$2]: already removed"
                  fi
              }

              delete_credential_if_exists "$ORG" "$ALERTMANAGER_CREDENTIAL"
              delete_credential_if_exists "$ORG" "$GRAFANA_CREDENTIAL"
              delete_credential_if_exists "$ORG" "$PROMETHEUS_CREDENTIAL"
              delete_credential_if_exists "$ORG" "$THANOS_CREDENTIAL"
          params:
            CY_API_KEY: ((cycloid_api_key))
            ORG: ($ .organization_canonical $)
            ALERTMANAGER_CREDENTIAL: ((alertmanager_cred))
            GRAFANA_CREDENTIAL: ((grafana_cred))
            PROMETHEUS_CREDENTIAL: ((prometheus_cred))
            THANOS_CREDENTIAL: ((thanos_cred))