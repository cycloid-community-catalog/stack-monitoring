
definitions:
  tasks:
    # The task producing a configured stack, merging stack and config.
    - &task-merge-stack-and-config
      task: merge-stack-and-config
      config:
        platform: linux
        image_resource:
          type: registry-image
          source:
            repository: cycloid/cycloid-toolkit
            tag: latest
        run:
          path: /bin/bash
          args:
          - '-ec'
          - |
            echo -e "${KUBECONFIG_CONTENT}" > stack/terraform/k8s/${KUBECONFIG_FILENAME}
            /usr/bin/merge-stack-and-config
        inputs:
          - name: git_config_terraform
            path: "config"
          - name: git_stack_terraform
            path: "stack"
        outputs:
          - name: merged-stack
            path: "merged-stack"
      params:
        CONFIG_PATH: ($ .project $)/terraform/($ .environment $)
        STACK_PATH: terraform/k8s
        KUBECONFIG_CONTENT: ((kubeconfig_content))
        KUBECONFIG_FILENAME: ((kubeconfig_filename))
        #($- if eq .use_case "aws-vm" $)
#($- else if eq .use_case "azure-vm" $)
#        CONFIG_PATH: ((project))/terraform/((env))
#        STACK_PATH: terraform/azure-vm
#($- end $)

resource_types:
- name: terraform
  type: registry-image
  source:
    repository: cycloid/terraform-resource
    tag: ((terraform_version))

groups:
- name: setup
  jobs:
  - terraform-plan
  - terraform-apply
  - grafana-default-dashboards
  - access-view

- name: destroy
  jobs:
  - terraform-destroy

resources:
- name: tfstate
  type: terraform
  source:
    backend_config:
      address: '($ .api_url $)/inventory?jwt=($ .inventory_jwt $)'
      ## skip_cert_verification needs to be enabled when using self signed certificates.
      # skip_cert_verification: true
    backend_type: http
    env_name: ($ .environment $)
    vars:
      env: ($ .environment $)
      project: ($ .project $)
      organization: ($ .organization_canonical $)
      cycloid_api_key: ((cycloid_api_key))
      kubeconfig_filename: ((kubeconfig_filename))
      prometheus_install: ((prometheus_install))
      grafana_install: ((grafana_install))
      alertmanager_install: ((alertmanager_install))
      alertmanager_use_external: ((alertmanager_use_external))
      alertmanager_config_receivers: ((alertmanager_config_receivers))
      opsgenie_token: ((opsgenie_token))
      namespace: ((namespace))
      grafana_sso_enabled: ((grafana_sso_enabled))
      grafana_sso_provider_name: ((grafana_sso_provider_name))
      grafana_sso_allowed_domains: ((grafana_sso_allowed_domains))
      grafana_sso_client_id: ((grafana_sso_client_id))
      grafana_sso_client_secret: ((grafana_sso_client_secret))
      grafana_sso_api_url: ((grafana_sso_api_url))
      grafana_sso_auth_url: ((grafana_sso_auth_url))
      grafana_sso_token_url: ((grafana_sso_token_url))
      grafana_sso_scopes: ((grafana_sso_scopes))
      grafana_sso_role_atribute_path: ((grafana_sso_role_atribute_path))
      grafana_additional_datasources: ((grafana_additional_datasources))

- name: git_stack_terraform
  type: git
  icon: github-circle
  source:
    uri: https://github.com/cycloid-community-catalog/stack-monitoring.git
    branch: ($ .scs_branch $)
    # Include only the Terraform files in the specified directory.
    paths:
      - terraform/k8s/*

- name: git_config_terraform
  type: git
  icon: github-circle
  source:
    uri: ($ .cr_url $)
    branch: ($ .cr_branch $)
#($- if eq .cr_cred_type "basic_auth" $)
#    username: ((($ .cr_cred_path $).username))
#    password: ((($ .cr_cred_path $).password))
#($- else $)
    private_key: ((($ .cr_cred_path $).ssh_key))
#($- end $)
    # Include only the Terraform files in the specified directory.
    paths:
      - ($ .project $)/terraform/($ .environment $)/*

jobs:
  - name: terraform-plan
    serial: true
    serial_groups: [terraform]
    max_in_flight: 1
    build_logs_to_retain: 10
    plan:
      - do:
        - get: git_stack_terraform
          trigger: true
        - get: git_config_terraform
          trigger: true
        - *task-merge-stack-and-config
        - put: tfstate
          params:
            plan_only: true
            terraform_source: merged-stack/

  - name: terraform-apply
    serial: true
    serial_groups: [terraform]
    build_logs_to_retain: 10
    plan:
      - do:
        - get: git_stack_terraform
          trigger: false
          passed:
            - terraform-plan
        - get: git_config_terraform
          trigger: false
          passed:
            - terraform-plan
        - get: tfstate
          trigger: false
          passed:
            - terraform-plan
        - *task-merge-stack-and-config
        - put: tfstate
          params:
            plan_run: true
            terraform_source: merged-stack/

  - name: grafana-default-dashboards
    serial: True
    build_logs_to_retain: 3
    plan:
    - do:
      - get: tfstate
        trigger: true
        passed:
          - terraform-apply
      - task: grafana-dashboard-config-update
        config:
          platform: linux
          image_resource:
            type: registry-image
            source:
              repository: alpine/k8s
              tag: ((kubectl_version))
          run:
            path: /bin/bash
            args:
            - -ec
            - |
              if [ "${GRAFANA_INSTALL}" = true ]; then
                echo -e "${KUBECONFIG_CONTENT}" > ./.kubeconfig
                export KUBECONFIG=./.kubeconfig
                export GRAFANA_CMS_TO_REMOVE=$(jq -r .grafana_cms_to_remove tfstate/metadata)
                NAMESPACE=$(jq -r .namespace tfstate/metadata)
                if [ ${#GRAFANA_CMS_TO_REMOVE[@]} -gt 0 ]; then
                  # kubectl delete dashboards if they exist
                  echo "$GRAFANA_CMS_TO_REMOVE" | jq -r '.[]' | while read -r configmap; do
                  if kubectl get configmap "kube-prometheus-stack-${configmap}" -n "$NAMESPACE" >/dev/null 2>&1; then
                    kubectl delete configmap "kube-prometheus-stack-${configmap}" -n $NAMESPACE >/dev/null 2>&1
                    echo "Configmap $configmap deleted"
                  else
                      echo "Configmap $configmap non existent already."
                  fi
                done
                else
                  echo "No default dashboard selected to delete!"
                fi
              else
                  echo "Grafana not installed... No configmaps to delete!"
              fi
          inputs:
          - name: tfstate
          params:
            GRAFANA_INSTALL: ((grafana_install))
            KUBECONFIG_CONTENT: ((kubeconfig_content))

  - name: access-view
    serial: True
    build_logs_to_retain: 3
    plan:
    - do:
      - get: tfstate
        trigger: true
        passed:
          - terraform-apply

      - task: tips-and-access
        config:
          platform: linux
          image_resource:
            type: registry-image
            source:
              repository: cycloid/cycloid-toolkit
              tag: latest
          run:
            path: /bin/bash
            args:
            - -ec
            - |
              source /usr/bin/cecho-utils
              # Display connection credentials
              echo -n "Here are your connection credentials for monitoring in k8s:"

              if [ "$PROMETHEUS_INSTALL" = "true" ]; then
                echo -n "Prometheus available at "; pwarning "$(jq -r .prometheus_domain_name tfstate/metadata)"
                echo -n "Basic credential : "; pwarning  "$(jq -r .prometheus_basic_auth_cred_cannonical tfstate/metadata)"
              fi

              if [ "$ALERTMANAGER_INSTALL" = "true" ]; then
                echo -e "\n"
                echo -n "Alertmanager available at "; pwarning "$(jq -r .alertmanager_domain_name tfstate/metadata)"
                echo -n "Basic credential : ";
                jq -r '.alertmanager_basic_auth_cred_cannonicals[]' tfstate/metadata | while read -r credential; do
                    pwarning "$credential"
                done
              fi

              if [ "$GRAFANA_INSTALL" = "true" ]; then
                echo -e "\n"
                echo -n "Grafana available at "; pwarning "$(jq -r .grafana_domain_name tfstate/metadata)"
                echo -n "Basic credential : "; pwarning  "$(jq -r .grafana_basic_auth_cred_cannonical tfstate/metadata)"
              fi

              # Display tips
              pwarning "Here are some tips to help debug issues"
              pwarning "k8s namespace: $(jq -r .namespace tfstate/metadata)"
              echo -e "Remote connect to the cluster using the kubeconfig context."
              echo -e "Copy the kubeconfig in /tmp for example and export the as env var KUBECONFIG=/tmp/kubeconfig.yaml kubectl <cmd> <obj>"
              # todo echo -e "You should find the kubeconfig used for this project at credential: "
              echo -e "Remember! For local tests add an entry in the /etc/hosts file, as follows <DNS_FOR_TEST> <k8s NODE IP>"

          inputs:
          - name: tfstate

          params:
            ORG: ($ .organization_canonical $)
            ENV: ($ .environment $)
            PROJECT: ($ .project $)
            KUBECONFIG_CONTENT: ((kubeconfig_content))
            GRAFANA_INSTALL: ((grafana_install))
            PROMETHEUS_INSTALL: ((prometheus_install))
            ALERTMANAGER_INSTALL: ((alertmanager_install))

  - name: terraform-destroy
    serial: true
    serial_groups: [terraform]
    build_logs_to_retain: 10
    plan:
      - do:
          - get: git_stack_terraform
            trigger: false
          - get: git_config_terraform
            trigger: false
          - *task-merge-stack-and-config
          - put: tfstate
            params:
              action: destroy
              terraform_source: merged-stack/
            get_params:
              action: destroy