
definitions:
  tasks:
    # The task producing a configured stack, merging stack and config.
    - &task-merge-stack-and-config
      task: merge-stack-and-config
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: cycloid/cycloid-toolkit
            tag: latest
        run:
          path: /usr/bin/merge-stack-and-config
        inputs:
          - name: git_config_terraform
            path: "config"
          - name: git_stack_terraform
            path: "stack"
        outputs:
          - name: merged-stack
            path: "merged-stack"
      params:
#($- if eq .use_case "aws-vm" $)
        CONFIG_PATH: ($ .project $)/terraform/($ .environment $)
        STACK_PATH: terraform/aws-vm
#($- else if eq .use_case "azure-vm" $)
#        CONFIG_PATH: ((project))/terraform/((env))
#        STACK_PATH: terraform/azure-vm
#($- end $)

resource_types:
- name: terraform
  type: docker-image
  source:
    repository: cycloid/terraform-resource
    tag: ((terraform_version))

groups:
- name: setup
  jobs:
  - creds-creation
  - terraform-plan
  - terraform-apply
  - deploy

- name: destroy
  jobs:
  - terraform-destroy
  - clean-vm-credential

resources:
- name: tfstate
  type: terraform
  source:
    backend_config:
      address: '($ .api_url $)/inventory?jwt=($ .inventory_jwt $)'
      ## skip_cert_verification needs to be enabled when using self signed certificates.
      # skip_cert_verification: true
    backend_type: http
    env_name: ($ .environment $)
    vars:
      env: ($ .environment $)
      project: ($ .project $)
      organization: ($ .organization_canonical $)
#($- if eq .use_case "aws-vm" $)
      aws_access_cred: ((aws_access_cred))
      aws_region: ((aws_default_region))
      aws_role_arn: ((aws_role_arn))
      aws_extra_tags: ((aws_extra_tags))
      ssh_public_key: ((((ssh_credential)).pub))
#($- else if eq .use_case "azure-vm" $)
      #azure_cred: ((($ .azure_cred $))
      #resource_group_name: ($ .resource_group_name$)
      #resource_group_location: ($ .resource_group_location$)
#($- end $)
      prometheus_domain_name: ((prometheus_domain_name))
      alertmanager_domain_name: ((alertmanager_domain_name))
      grafana_domain_name: ((grafana_domain_name))

- name: git_stack_ansible
  type: git
  icon: github-circle
  source:
    uri: https://github.com/cycloid-community-catalog/stack-monitoring.git
    branch: ($ .scs_branch $)
    paths:
      - ansible/*

- name: git_config_ansible
  type: git
  source:
    uri: ($ .cr_url $)
    branch: ($ .cr_branch $)
#($- if eq .cr_cred_type "basic_auth" $)
#    username: ((($ .cr_cred_path $).username))
#    password: ((($ .cr_cred_path $).password))
#($- else $)
    private_key: ((($ .cr_cred_path $).ssh_key))
#($- end $)
    paths:
#($- if eq .use_case "aws-vm" $)
      - ($ .project $)/ansible/environments/($ .environment $)_aws_vm_monitoring.yml
#($- else if eq .use_case "azure-vm" $)
#      - ($ .project $)/ansible/environments/($ .environment $)_azure_vm_monitoring.yml
#($- end $)

- name: git_stack_terraform
  type: git
  icon: github-circle
  source:
    uri: https://github.com/cycloid-community-catalog/stack-monitoring.git
    branch: ($ .scs_branch $)
    # Include only the Terraform files in the specified directory.
    paths:
#($- if eq .use_case "aws-vm" $)
      - terraform/aws-vm/*
#($- else if eq .use_case "azure-vm" $)
#      - terraform/azure-vm/*
#($- end $)

- name: git_config_terraform
  type: git
  icon: github-circle
  source:
    uri: ($ .cr_url $)
    branch: ($ .cr_branch $)
#($- if eq .cr_cred_type "basic_auth" $)
#    username: ((($ .cr_cred_path $).username))
#    password: ((($ .cr_cred_path $).password))
#($- else $)
    private_key: ((($ .cr_cred_path $).ssh_key))
#($- end $)
    # Include only the Terraform files in the specified directory.
    paths:
      - ($ .project $)/terraform/($ .environment $)/*

jobs:
  - name: creds-creation
    build_logs_to_retain: 10
    plan:
    - do:
      - get: git_config_terraform
        trigger: true
      - task: creds-creation
        config:
          platform: linux
          image_resource:
            type: docker-image
            source:
              repository: cycloid/cycloid-toolkit
              tag: "v((ansible_version))"
          run:
            path: /bin/bash
            args:
              - '-ec'
              - |
                # login to cli
                cy login --org $ORG > /dev/null 2>&1

                # required for htpasswd command
                apk add apache2-utils -q  > /dev/null

                # check for prometheus
                if [ "$PROMETHEUS_INSTALL" = "true" ]; then

                  echo "Checking credentials for prometheus..."

                  # check if credential exists
                  if [[ -z $(cy --org "$ORG"credential list -o json -o json 2>/dev/null | jq -r ".[] | select(.canonical == \"$PROMETHEUS_CREDENTIAL\") | .canonical") ]]; then

                      echo "Credential '$PROMETHEUS_CREDENTIAL' does not exist. Creating..."

                      prometheus_user=$ORG
                      prometheus_password=$(openssl rand -base64 32)
                      prometheus_httpd=$(htpasswd -nb "$prometheus_user" "$prometheus_password" 2>/dev/null)

                      cy --org "$ORG" credential create custom \
                          --path "$PROMETHEUS_CREDENTIAL" \
                          --name "$PROMETHEUS_CREDENTIAL" \
                          --field "user=$prometheus_user" \
                          --field "pwd=$prometheus_password" \
                          --field "httpwd=$prometheus_httpd" > /dev/null 2>&1

                      echo "Credential created."
                  fi
                fi

                # check for alertmanager
                if [ "$ALERTMANAGER_INSTALL" = "true" ]; then

                  echo -e "\nChecking credentials for alertmanager..."

                  # check if credential exists
                  if [[ -z $(cy --org "$ORG"credential list -o json 2>/dev/null | jq -r ".[] | select(.canonical == \"$ALERTMANAGER_CREDENTIAL\") | .canonical") ]]; then

                      echo "Credential '$ALERTMANAGER_CREDENTIAL' does not exist. Creating..."

                      alertmanager_user=$ORG
                      alertmanager_password=$(pwgen -scny 16 1 | tr -d '"\\')
                      alertmanager_httpd=$(htpasswd -nb "$alertmanager_user" "$alertmanager_password")

                      cy --org "$ORG" credential create custom \
                          --path "$ALERTMANAGER_CREDENTIAL" \
                          --name "$ALERTMANAGER_CREDENTIAL" \
                          --field "user=$alertmanager_user" \
                          --field "pwd=$alertmanager_password" \
                          --field "httpwd=$alertmanager_httpd" > /dev/null 2>&1

                      echo "Credential created."
                  fi
                fi

                # check for grafana
                if [ "$GRAFANA_INSTALL" = "true" ]; then

                  echo -e "\nChecking credentials for grafana..."

                  # check if credential exists
                  if [[ -z $(cy --org "$ORG"credential list -o json 2>/dev/null | jq -r ".[] | select(.canonical == \"$GRAFANA_CREDENTIAL\") | .canonical") ]]; then

                      echo "Credential '$GRAFANA_CREDENTIAL' does not exist. Creating..."

                      grafana_user=$ORG
                      grafana_password=$(openssl rand -base64 32)
                      grafana_admin_user="admin"
                      grafana_admin_pwd=$(openssl rand -base64 32)
                      grafana_httpd=$(htpasswd -nb "$grafana_user" "$grafana_password" 2>/dev/null)

                      cy --org "$ORG" credential create custom \
                          --path "$GRAFANA_CREDENTIAL" \
                          --name "$GRAFANA_CREDENTIAL" \
                          --field "user=$grafana_user" \
                          --field "pwd=$grafana_password"\
                          --field "admin_user=$grafana_admin_user" \
                          --field "admin_pwd=$grafana_admin_pwd" \
                          --field "httpwd=$grafana_httpd" > /dev/null 2>&1 2>&1

                      echo "Credential created."
                  fi
                fi

                # check if credential exists to store SSH private key
                echo -e "\nChecking SSH credential ..."

                  if [[ -z $(cy --org "$ORG"credential list -o json 2>/dev/null | jq -r ".[] | select(.canonical == \"$SSH_CREDENTIAL\") | .canonical") ]]; then

                    echo "Credential '$SSH_CREDENTIAL' does not exist. Creating..."

                    # Creates key
                    ssh-keygen -t ed25519 -C "monitoring@${ORG}" -f "./ssh_key" -N "" > /dev/null
                    export SSH_PRIV="$(cat ssh_key)"
                    export SSH_PUB="$(cat ssh_key.pub)"

                    cy --org "$ORG" credential create custom \
                        --path "$SSH_CREDENTIAL" \
                        --name "$SSH_CREDENTIAL" \
                        --field "priv=$SSH_PRIV" \
                        --field "pub=$SSH_PUB" > /dev/null 2>&1

                    echo "Credential created."
                fi
        params:
          CY_API_KEY: ((cycloid_api_key))
          PROMETHEUS_INSTALL: ((prometheus_install))
          ALERTMANAGER_INSTALL: ((alertmanager_install))
          GRAFANA_INSTALL: ((grafana_install))
          ORG: ($ .organization_canonical $)
          ENV: ($ .environment $)
          PROJECT: ($ .project $)
          SSH_CREDENTIAL: ((ssh_credential))
          GRAFANA_CREDENTIAL: ((grafana_cred))
          ALERTMANAGER_CREDENTIAL: ((alertmanager_cred))
          PROMETHEUS_CREDENTIAL: ((prometheus_cred))

  - name: terraform-plan
    serial: true
    serial_groups: [terraform]
    max_in_flight: 1
    build_logs_to_retain: 10
    plan:
      - do:
        - get: git_stack_terraform
          trigger: true
        - get: git_config_terraform
          trigger: true
          passed:
            - creds-creation
        - *task-merge-stack-and-config
        - put: tfstate
          params:
            plan_only: true
            terraform_source: merged-stack/

  - name: terraform-apply
    serial: true
    serial_groups: [terraform]
    build_logs_to_retain: 10
    plan:
      - do:
        - get: git_stack_terraform
          trigger: false
          passed:
            - terraform-plan
        - get: git_config_terraform
          trigger: false
          passed:
            - terraform-plan
        - get: tfstate
          trigger: false
          passed:
            - terraform-plan
        - *task-merge-stack-and-config
        - put: tfstate
          params:
            plan_run: true
            terraform_source: merged-stack/

  - name: deploy
    build_logs_to_retain: 10
    plan:
    - do:
      - get: tfstate
        trigger: false
        passed:
          - terraform-apply

      - get: git_stack_ansible
        trigger: false

      - get: git_config_ansible
        trigger: true

      - task: merge-stack-and-config
        config:
          platform: linux
          image_resource:
            type: docker-image
            source:
              repository: cycloid/cycloid-toolkit
              tag: latest
          run:
            path: /bin/bash
            args:
              - '-exc'
              - |
                /usr/bin/merge-stack-and-config

                # create inventory file
                #($- if eq .use_case "aws-vm" $)
                echo -e "[tag_vm_aws]" >> merged-stack/inventory
                #($- else if eq .use_case "azure-vm" $)
                # echo -e "[tag_vm_azure]" >> merged-stack/inventory
                #($- end $)

                if [ "$USE_BASTION" = true ]; then
                  jq -r '.machine_ip_private_address' terraform/metadata >> merged-stack/inventory
                else
                  jq -r '.machine_ip_public_address' terraform/metadata >> merged-stack/inventory
                fi
                cat merged-stack/inventory

                # import nginx certificates
                if [ "$CREATE_SELF_SIGNED_CERTIFICATE" = false ]; then
                echo -e "${NGINX_SSL_KEY}" > merged-stack/files/nginx/ssl/tls.key
                echo -e "${NGINX_SSL_CERTIFICATE}" > merged-stack/files/nginx/ssl/tls.crt
                fi

          inputs:
            - name: git_config_ansible
              path: "config"
            - name: git_stack_ansible
              path: "stack"
            - name: tfstate
              path: "terraform"
          outputs:
            - name: merged-stack
              path: "merged-stack"
        params:
          CONFIG_PATH: ($ .project $)/ansible
          STACK_PATH: ansible
          CREATE_SELF_SIGNED_CERTIFICATE: ((create_self_signed_certificate))
          NGINX_SSL_CERTIFICATE: ((nginx_certificate))
          NGINX_SSL_KEY: ((nginx_certificate_key))
          USE_BASTION: ((use_bastion))

      - task: run-ansible
        config:
          platform: linux
          image_resource:
            type: docker-image
            source:
              repository: cycloid/cycloid-toolkit
              tag: "v((ansible_version))"
          run:
            path: /bin/bash
            args:
              - '-exc'
              - |
                #issue with gnu run locally
                #https://stackoverflow.com/questions/54377305/tar-not-found-in-archive-error-when-using-docker-alpine
                apk add --no-cache tar > /dev/null 2>&1

                # Static inventory
                ansible-inventory -i ansible-playbook/inventory --graph
                /usr/bin/ansible-runner
          caches:
            - path: ansible-playbook/roles
          inputs:
          - name: merged-stack
            path: ansible-playbook
        params:
          PROMETHEUS_INSTALL: ((prometheus_install))
          ALERTMANAGER_INSTALL: ((alertmanager_install))
          GRAFANA_INSTALL: ((grafana_install))
          ANSIBLE_PLAYBOOK_PATH: ansible-playbook
          ANSIBLE_PLAYBOOK_NAME: main.yml
          BASTION_URL: ((bastion_url))
          SSH_PRIVATE_KEY: ((((ssh_credential)).priv))
          ANSIBLE_INVENTORY: inventory
          EXTRA_ANSIBLE_ARGS: "-i inventory"
          ANSIBLE_FORCE_GALAXY: false
          ANSIBLE_REMOTE_USER:  admin
#($- if eq .use_case "aws-vm" $)
          EXTRA_ARGS: "--limit tag_vm_aws"
#($- else if eq .use_case "azure-vm" $)
#          EXTRA_ARGS: "--limit tag_vm_azure"
#($- end $)
          EXTRA_ANSIBLE_VARS:
            env: ($ .environment $)
            project: ($ .project $)
            organization: ($ .organization_canonical $)
            role: "monitoring"
            external_alertmanager_password: ((external_alertmanager_password))
            external_alertmanager_username: ((external_alertmanager_username))
            external_alertmanager_targets: ((external_alertmanager_targets))
            prometheus_web_login: ((((prometheus_cred)).httpwd))
            prometheus_user: ((((prometheus_cred)).user))
            prometheus_password: ((((prometheus_cred)).pwd))
            alertmanager_web_login: ((((alertmanager_cred)).httpwd))
            alertmanager_user: ((((alertmanager_cred)).user))
            alertmanager_password: ((((alertmanager_cred)).pwd))
            grafana_web_login: ((((grafana_cred)).httpwd))
            grafana_user: ((((grafana_cred)).user))
            grafana_password: ((((grafana_cred)).pwd))
            grafana_admin_user: ((((grafana_cred)).admin_user))
            grafana_admin_pwd: ((((grafana_cred)).admin_pwd))

#($- if eq .use_case "aws-vm" $)
            aws_default_region: ((aws_default_region))
#($- else if eq .use_case "azure-vm" $)
#            azure_subscription_id: ((($ .azure_cred $).subscription_id))
#            azure_tenant_id: ((($ .azure_cred $).tenant_id))
#            azure_client_id: ((($ .azure_cred $).client_id))
#            azure_client_secret: ((($ .azure_cred $).client_secret))
#            azure_resource_group: ($ .resource_group_name $)
#($- end $)

#  - name: access-mgmt
#    build_logs_to_retain: 10
#    plan:
#    - do:
#      - get: tfstate
#        trigger: false
#        passed:
#          - deploy
#
#      - task: show-creds
#        config:
#          platform: linux
#          image_resource:
#            type: docker-image
#            source:
#              repository: cycloid/cycloid-toolkit
#              tag: latest
#          run:
#            path: /bin/bash
#            args:
#              - '-exc'
#              - |
#                # Define color codes
#                GREEN='\033[0;32m'
#                BLUE='\033[0;34m'
#                YELLOW='\033[0;33m'
#                RED='\033[0;31m'
#                NC='\033[0m' # No Color
#
#                # Display connection credentials
#                echo "${GREEN}Here are your connection credentials:${NC}"
#
#                echo "${BLUE}External Alertmanager Username:${NC} $external_alertmanager_username"
#                echo "${BLUE}External Alertmanager Password:${NC} $external_alertmanager_password"
#                echo "${BLUE}External Alertmanager Targets:${NC} $external_alertmanager_targets"
#                echo ""
#                echo "${YELLOW}Remember to keep these credentials safe!${NC}"
#                echo ""
#                echo "${RED}Command Tips for Troubleshooting:${NC}"
#                echo "  1. If you encounter issues, check your connection using the following command:"
#                echo "     - curl -u \"$external_alertmanager_username:$external_alertmanager_password\" $external_alertmanager_targets"
#                echo "  2. Verify the AWS region and ensure your permissions are correctly set."
#                echo "  3. Use 'echo' to debug your variables:"
#                echo "     - echo \"Environment: \$env\""
#                echo "  4. If using Ansible, run the playbook with increased verbosity:"
#                echo "     - ansible-playbook playbook.yml -vvvv"
#                echo ""
#                echo "${GREEN}Happy connecting!${NC}"

  - name: terraform-destroy
    serial: true
    serial_groups: [terraform]
    build_logs_to_retain: 10
    plan:
      - do:
          - get: git_stack_terraform
            trigger: false
          - get: git_config_terraform
            trigger: false
          - *task-merge-stack-and-config
          - put: tfstate
            params:
              action: destroy
              terraform_source: merged-stack/
            get_params:
              action: destroy

  - name: clean-vm-credential
    serial_groups: [terraform]
    build_logs_to_retain: 3
    plan:
    - do:
      - get: git_config_terraform
        trigger: true
        passed:
          - terraform-destroy

      - task: clean-cred
        config:
          platform: linux
          image_resource:
            type: registry-image
            source:
              repository: cycloid/cycloid-toolkit
              tag: latest
          run:
            path: /bin/bash
            args:
            - -ec
            - |
              DIR=${PWD}
              # conects to cli using  api_key and checks if credential exists
              cy --insecure login --org vianeo --api-key $API_KEY
              CRED=$(cy --insecure  --org vianeo  credential list -o json | jq -r ".[] | select( .canonical == \"$CRED_CANONICAL_SECRETS\") | .canonical")

              if [ ! -z "$CRED" ]; then
                cy --insecure  --org vianeo  credential delete --canonical $CRED_CANONICAL_SECRETS
                echo "Credential [$CRED_CANONICAL_SECRETS]: removed"
              else
                echo "Credential [$CRED_CANONICAL_SECRETS]: already removed"
              fi

              CRED=$(cy --insecure  --org vianeo  credential list -o json | jq -r ".[] | select( .canonical == \"$CRED_CANONICAL_TAG\") | .canonical")

          params:
            API_KEY: ((cycloid_api_key))
            CRED_CANONICAL_SECRETS: ((project))-((env))
            CRED_CANONICAL_TAG: ((project))-((env))-docker-tag
