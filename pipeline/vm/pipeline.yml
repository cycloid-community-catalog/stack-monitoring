
definitions:
  tasks:
    # The task producing a configured stack, merging stack and config.
    - &task-merge-stack-and-config
      task: merge-stack-and-config
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: cycloid/cycloid-toolkit
            tag: latest
        run:
          path: /usr/bin/merge-stack-and-config
        inputs:
          - name: git_config_terraform
            path: "config"
          - name: git_stack_terraform
            path: "stack"
        outputs:
          - name: merged-stack
            path: "merged-stack"
      params:
#($- if eq .use_case "aws-vm" $)
        CONFIG_PATH: ($ .project $)/terraform/($ .environment $)
        STACK_PATH: terraform/aws-vm
#($- else if eq .use_case "azure-vm" $)
#        CONFIG_PATH: ((project))/terraform/((env))
#        STACK_PATH: terraform/azure-vm
#($- end $)

resource_types:
- name: terraform
  type: docker-image
  source:
    repository: cycloid/terraform-resource
    tag: ((terraform_version))

groups:
- name: setup
  jobs:
  - terraform-plan
  - terraform-apply
  - deploy
  - access-view

- name: destroy
  jobs:
  - terraform-destroy

resources:
- name: tfstate
  type: terraform
  source:
    backend_config:
      address: '($ .api_url $)/inventory?jwt=($ .inventory_jwt $)'
      ## skip_cert_verification needs to be enabled when using self signed certificates.
      # skip_cert_verification: true
    backend_type: http
    env_name: ($ .environment $)
    vars:
      env: ($ .environment $)
      project: ($ .project $)
      organization: ($ .organization_canonical $)
#($- if eq .use_case "aws-vm" $)
      aws_access_cred: ((aws_access_cred))
      aws_region: ((aws_default_region))
      aws_extra_tags: ((aws_extra_tags))
      use_bastion: ((use_bastion))
      bastion_public_ssh_key : ((bastion_public_ssh_key))
      tls_crt: ((tls_crt))
      tls_key: ((tls_key))
      cycloid_api_key: ((cycloid_api_key))
#($- else if eq .use_case "azure-vm" $)
      #azure_cred: ((($ .azure_cred $))
      #resource_group_name: ($ .resource_group_name$)
      #resource_group_location: ($ .resource_group_location$)
#($- end $)

- name: git_stack_ansible
  type: git
  icon: github-circle
  source:
    uri: https://github.com/cycloid-community-catalog/stack-monitoring.git
    branch: ($ .scs_branch $)
    paths:
      - ansible/*

- name: git_config_ansible
  type: git
  source:
    uri: ($ .cr_url $)
    branch: ($ .cr_branch $)
($- if eq .cr_cred_type "basic_auth" $)
    username: ((($ .cr_cred_path $).username))
    password: ((($ .cr_cred_path $).password))
($- else $)
    private_key: ((($ .cr_cred_path $).ssh_key))
($- end $)
    paths:
#($- if eq .use_case "aws-vm" $)
      - ($ .project $)/ansible/environments/($ .environment $)_aws_vm_monitoring.yml
#($- else if eq .use_case "azure-vm" $)
#      - ($ .project $)/ansible/environments/($ .environment $)_azure_vm_monitoring.yml
#($- end $)

- name: git_stack_terraform
  type: git
  icon: github-circle
  source:
    uri: https://github.com/cycloid-community-catalog/stack-monitoring.git
    branch: ($ .scs_branch $)
    # Include only the Terraform files in the specified directory.
    paths:
#($- if eq .use_case "aws-vm" $)
      - terraform/aws-vm/*
#($- else if eq .use_case "azure-vm" $)
#      - terraform/azure-vm/*
#($- end $)

- name: git_config_terraform
  type: git
  icon: github-circle
  source:
    uri: ($ .cr_url $)
    branch: ($ .cr_branch $)
($- if eq .cr_cred_type "basic_auth" $)
    username: ((($ .cr_cred_path $).username))
    password: ((($ .cr_cred_path $).password))
($- else $)
    private_key: ((($ .cr_cred_path $).ssh_key))
($- end $)
    # Include only the Terraform files in the specified directory.
    paths:
      - ($ .project $)/terraform/($ .environment $)/*

jobs:
  - name: terraform-plan
    serial: true
    serial_groups: [terraform]
    max_in_flight: 1
    build_logs_to_retain: 10
    plan:
      - do:
        - get: git_stack_terraform
          trigger: true
        - get: git_config_terraform
          trigger: true
        - *task-merge-stack-and-config
        - put: tfstate
          params:
            plan_only: true
            terraform_source: merged-stack/

  - name: terraform-apply
    serial: true
    serial_groups: [terraform]
    build_logs_to_retain: 10
    plan:
      - do:
        - get: git_stack_terraform
          trigger: false
          passed:
            - terraform-plan
        - get: git_config_terraform
          trigger: false
          passed:
            - terraform-plan
        - get: tfstate
          trigger: false
          passed:
            - terraform-plan
        - *task-merge-stack-and-config
        - put: tfstate
          params:
            plan_run: true
            terraform_source: merged-stack/

  - name: deploy
    build_logs_to_retain: 10
    plan:
    - do:
      - get: tfstate
        trigger: false
        passed:
          - terraform-apply

      - get: git_stack_ansible
        trigger: false

      - get: git_config_ansible
        trigger: true

      - task: merge-stack-and-config
        config:
          platform: linux
          image_resource:
            type: docker-image
            source:
              repository: cycloid/cycloid-toolkit
              tag: latest
          run:
            path: /bin/bash
            args:
              - '-exc'
              - |
                # temporary hack because of issue with \n in merge-stack-and-config
                jq '.ssh_private_key = "" | .ssh_public_key = ""' terraform/metadata > terraform/metadata.tmp && mv terraform/metadata.tmp terraform/metadata
                /usr/bin/merge-stack-and-config

                # create inventory file
                #($- if eq .use_case "aws-vm" $)
                echo -e "[tag_vm_aws]" >> merged-stack/inventory
                #($- else if eq .use_case "azure-vm" $)
                # echo -e "[tag_vm_azure]" >> merged-stack/inventory
                #($- end $)

                if [ "$USE_BASTION" = true ]; then
                  jq -r '.machine_ip_private_address' terraform/metadata >> merged-stack/inventory
                else
                  jq -r '.machine_ip_public_address' terraform/metadata >> merged-stack/inventory
                fi
                cat merged-stack/inventory

          inputs:
            - name: git_config_ansible
              path: "config"
            - name: git_stack_ansible
              path: "stack"
            - name: tfstate
              path: "terraform"
          outputs:
            - name: merged-stack
              path: "merged-stack"
        params:
          CONFIG_PATH: ($ .project $)/ansible
          STACK_PATH: ansible
          USE_BASTION: ((use_bastion))

      - task: run-ansible
        config:
          platform: linux
          image_resource:
            type: docker-image
            source:
              repository: cycloid/cycloid-toolkit
              tag: "v((ansible_version))"
          run:
            path: /bin/bash
            args:
              - '-exc'
              - |
                #issue with gnu run locally
                #https://stackoverflow.com/questions/54377305/tar-not-found-in-archive-error-when-using-docker-alpine
                apk add --no-cache tar > /dev/null 2>&1

                if [ "$SSH_PRIVATE_KEY" = "" ]; then
                  # ansible connects directly to the machine without using the bastion ssh key for that
                  export SSH_PRIVATE_KEY=$(jq -r '.ssh_private_key' terraform/metadata)
                else
                  # add also the private key of the machine and bastion so that both can be passed to the ssh-agent
                  echo -e "$(jq -r '.ssh_private_key' terraform/metadata)" > /root/.ssh/id_rsa_machine
                  chmod 600 /root/.ssh/id_rsa_machine
                  #ssh-add /root/.ssh/id_rsa_machine
                fi

                # Static inventory
                ansible-inventory -i ansible-playbook/inventory --graph
                /usr/bin/ansible-runner
          caches:
            - path: ansible-playbook/roles
          inputs:
          - name: merged-stack
            path: ansible-playbook
            # temporary hack because of issue of merge-and-config
          - name: tfstate
            path: "terraform"
        params:
          ANSIBLE_PLAYBOOK_PATH: ansible-playbook
          ANSIBLE_PLAYBOOK_NAME: main.yml
          SSH_JUMP_URL: ((bastion_url))
          SSH_PRIVATE_KEY: ((bastion_private_ssh_key))
          ANSIBLE_INVENTORY: inventory
          EXTRA_ANSIBLE_ARGS: "-i inventory"
          ANSIBLE_FORCE_GALAXY: false
          ANSIBLE_REMOTE_USER:  admin
#($- if eq .use_case "aws-vm" $)
          EXTRA_ARGS: "--limit tag_vm_aws"
#($- else if eq .use_case "azure-vm" $)
#          EXTRA_ARGS: "--limit tag_vm_azure"
#($- end $)
          EXTRA_ANSIBLE_VARS:
            env: ($ .environment $)
            project: ($ .project $)
            organization: ($ .organization_canonical $)
            role: "monitoring"
            external_alertmanager_password: ((external_alertmanager_password))
            external_alertmanager_username: ((external_alertmanager_username))
            external_alertmanager_targets: ((external_alertmanager_targets))
            postgres_db_user: ((postgres_db_user))
            postgres_db_password: ((postgres_db_password))
            postgres_db_host: ((postgres_db_host))
            postgres_db_port: ((postgres_db_port))
            mysql_db_user: ((mysql_db_user))
            mysql_db_password: ((mysql_db_password))
            mysql_db_host: ((mysql_db_host))
            mysql_db_port: ((mysql_db_port))
#($- if eq .use_case "aws-vm" $)
            aws_default_region: ((aws_default_region))
#($- else if eq .use_case "azure-vm" $)
#            azure_subscription_id: ((($ .azure_cred $).subscription_id))
#            azure_tenant_id: ((($ .azure_cred $).tenant_id))
#            azure_client_id: ((($ .azure_cred $).client_id))
#            azure_client_secret: ((($ .azure_cred $).client_secret))
#            azure_resource_group: ($ .resource_group_name $)
#($- end $)


  - name: access-view
    serial: True
    build_logs_to_retain: 3
    plan:
    - do:
      - get: tfstate
        trigger: true
        passed:
          - terraform-apply

      - task: tips-and-access
        config:
          platform: linux
          image_resource:
            type: registry-image
            source:
              repository: cycloid/cycloid-toolkit
              tag: latest
          run:
            path: /bin/bash
            args:
            - -ec
            - |
              source /usr/bin/cecho-utils
              # Display connection credentials
              echo -n "Here are your connection credentials for VM at "; perror "$(jq -r .machine_ip_public_address tfstate/metadata):"

              if [ "$PROMETHEUS_INSTALL" = "true" ]; then
                echo -n "Prometheus available at "; pwarning "$(jq -r .prometheus_domain_name tfstate/metadata)"
                echo -n "Basic credential : "; pwarning  "$(jq -r .prometheus_basic_auth_cred_cannonical tfstate/metadata)"
              fi

              if [ "$ALERTMANAGER_INSTALL" = "true" ]; then
                echo -e "\n"
                echo -n "Alertmanager available at "; pwarning "$(jq -r .alertmanager_domain_name tfstate/metadata)"
                echo -n "Basic credential : "; pwarning  "$(jq -r .alertmanager_basic_auth_cred_cannonical tfstate/metadata)"
              fi

              if [ "$GRAFANA_INSTALL" = "true" ]; then
                echo -e "\n"
                echo -n "Grafana available at "; pwarning "$(jq -r .grafana_domain_name tfstate/metadata)"
                echo -n "Basic credential : "; pwarning  "$(jq -r .grafana_basic_auth_cred_cannonical tfstate/metadata)"
              fi

              # Display tips
              echo -e "Here are some tips to help debug issues\n"
# todo add template for the usecase of bastion
              echo -e "Remote connect to the vm:"
              echo -e "Private ssh key available at the credential : $(jq -r .ssh_private_key_cred_cannonical tfstate/metadata)"
              echo -e "Copy the key into a local file"
              pinfo "ssh -i .SSH_FILE admin@$(jq -r .machine_ip_public_address tfstate/metadata)"

          inputs:
          - name: tfstate

          params:
            ORG: ($ .organization_canonical $)
            ENV: ($ .environment $)
            PROJECT: ($ .project $)
            GRAFANA_INSTALL: ((grafana_install))
            PROMETHEUS_INSTALL: ((prometheus_install))
            ALERTMANAGER_INSTALL: ((alertmanager_install))

  - name: terraform-destroy
    serial: true
    serial_groups: [terraform]
    build_logs_to_retain: 10
    plan:
      - do:
          - get: git_stack_terraform
            trigger: false
          - get: git_config_terraform
            trigger: false
          - *task-merge-stack-and-config
          - put: tfstate
            params:
              action: destroy
              terraform_source: merged-stack/
            get_params:
              action: destroy
