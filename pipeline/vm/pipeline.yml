
definitions:
  tasks:
    # The task producing a configured stack, merging stack and config.
    - &task-merge-stack-and-config
      task: merge-stack-and-config
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: cycloid/cycloid-toolkit
            tag: latest
        run:
          path: /usr/bin/merge-stack-and-config
        inputs:
          - name: git_config_terraform
            path: "config"
          - name: git_stack_terraform
            path: "stack"
        outputs:
          - name: merged-stack
            path: "merged-stack"
      params:
#($- if eq .use_case "aws-vm" $)
        CONFIG_PATH: ($ .project $)/terraform/($ .environment $)
        STACK_PATH: terraform/aws-vm
#($- else if eq .use_case "azure-vm" $)
#        CONFIG_PATH: ((project))/terraform/((env))
#        STACK_PATH: terraform/azure-vm
#($- end $)

resource_types:
- name: terraform
  type: docker-image
  source:
    repository: cycloid/terraform-resource
    tag: ((terraform_version))

groups:
- name: ($ .project $)-($ .environment $)
  jobs:
  - terraform-plan
  - terraform-apply
  - deploy
- name: destroy
  jobs:
  - terraform-destroy

resources:
- name: tfstate
  type: terraform
  source:
    backend_config:
      address: '($ .api_url $)/inventory?jwt=($ .inventory_jwt $)'
      ## skip_cert_verification needs to be enabled when using self signed certificates.
      # skip_cert_verification: true
    backend_type: http
    env_name: ($ .environment $)
    vars:
      env: ($ .environment $)
      project: ($ .project $)
      customer: ($ .organization_canonical $)
#($- if eq .use_case "aws-vm" $)
      aws_access_key: ((aws_access_key))
      aws_secret_key: ((aws_secret_key))
      aws_region: ((aws_default_region))
      aws_role_arn: ((aws_role_arn))
#($- else if eq .use_case "azure-vm" $)
      #azure_cred: ((($ .azure_cred $))
      #resource_group_name: ($ .resource_group_name$)
      #resource_group_location: ($ .resource_group_location$)
#($- end $)
      create_keypair: ((create_keypair))
      keypair_name: ((keypair_name))
      ssh_public_key: ((ssh_public_key))
      prometheus_domain_name: ((prometheus_domain_name))
      alertmanager_domain_name: ((alertmanager_domain_name))
      grafana_domain_name: ((grafana_domain_name))

- name: git_stack_ansible
  type: git
  icon: github-circle
  source:
    uri: https://github.com/cycloid-community-catalog/stack-monitoring.git
    branch: ($ .scs_branch $)
    paths:
      - ansible/*

- name: git_config_ansible
  type: git
  source:
    uri: ($ .cr_url $)
    branch: ($ .cr_branch $)
#($- if eq .cr_cred_type "basic_auth" $)
#    username: ((($ .cr_cred_path $).username))
#    password: ((($ .cr_cred_path $).password))
#($- else $)
    private_key: ((($ .cr_cred_path $).ssh_key))
#($- end $)
    paths:
#($- if eq .use_case "aws-vm" $)
      - ($ .project $)/ansible/environments/($ .environment $)_aws_vm_monitoring.yml
#($- else if eq .use_case "azure-vm" $)
#      - ($ .project $)/ansible/environments/($ .environment $)_azure_vm_monitoring.yml
#($- end $)

- name: git_stack_terraform
  type: git
  icon: github-circle
  source:
    uri: https://github.com/cycloid-community-catalog/stack-monitoring.git
    branch: ($ .scs_branch $)
    # Include only the Terraform files in the specified directory.
    paths:
#($- if eq .use_case "aws-vm" $)
      - terraform/aws-vm/*
#($- else if eq .use_case "azure-vm" $)
#      - terraform/azure-vm/*
#($- end $)

- name: git_config_terraform
  type: git
  icon: github-circle
  source:
    uri: ($ .cr_url $)
    branch: ($ .cr_branch $)
#($- if eq .cr_cred_type "basic_auth" $)
#    username: ((($ .cr_cred_path $).username))
#    password: ((($ .cr_cred_path $).password))
#($- else $)
    private_key: ((($ .cr_cred_path $).ssh_key))
#($- end $)
    # Include only the Terraform files in the specified directory.
    paths:
      - ($ .project $)/terraform/($ .environment $)/*

jobs:
  - name: terraform-plan
    serial: true
    serial_groups: [terraform]
    max_in_flight: 1
    build_logs_to_retain: 10
    plan:
      - do:
        - get: git_stack_terraform
          trigger: true
        - get: git_config_terraform
          trigger: true
        - *task-merge-stack-and-config
        - put: tfstate
          params:
            plan_only: true
            terraform_source: merged-stack/

  - name: terraform-apply
    serial: true
    serial_groups: [terraform]
    build_logs_to_retain: 10
    plan:
      - do:
        - get: git_stack_terraform
          trigger: false
          passed:
            - terraform-plan
        - get: git_config_terraform
          trigger: false
          passed:
            - terraform-plan
        - get: tfstate
          trigger: false
          passed:
            - terraform-plan
        - *task-merge-stack-and-config
        - put: tfstate
          params:
            plan_run: true
            terraform_source: merged-stack/

  - name: deploy
    build_logs_to_retain: 10
    plan:
    - do:
      - get: tfstate
        trigger: false
        passed:
          - terraform-apply

      - get: git_stack_ansible
        trigger: false

      - get: git_config_ansible
        trigger: true

      - task: merge-stack-and-config
        config:
          platform: linux
          image_resource:
            type: docker-image
            source:
              repository: cycloid/cycloid-toolkit
              tag: latest
          run:
            path: /bin/bash
            args:
              - '-exc'
              - |
                /usr/bin/merge-stack-and-config

                # create inventory file
                #($- if eq .use_case "aws-vm" $)
                echo -e "[tag_vm_aws]" >> merged-stack/inventory
                #($- else if eq .use_case "azure-vm" $)
                # echo -e "[tag_vm_azure]" >> merged-stack/inventory
                #($- end $)

                if [ "$USE_BASTION" = true ]; then
                  jq -r '.machine_ip_private_address' terraform/metadata >> merged-stack/inventory
                else
                  jq -r '.machine_ip_public_address' terraform/metadata >> merged-stack/inventory
                fi
                cat merged-stack/inventory

                # import nginx certificates
                if [ "$CREATE_SELF_SIGNED_CERTIFICATE" = false ]; then
                echo -e "${NGINX_SSL_KEY}" > merged-stack/files/nginx/ssl/tls.key
                echo -e "${NGINX_SSL_CERTIFICATE}" > merged-stack/files/nginx/ssl/tls.crt
                fi

          inputs:
            - name: git_config_ansible
              path: "config"
            - name: git_stack_ansible
              path: "stack"
            - name: tfstate
              path: "terraform"
          outputs:
            - name: merged-stack
              path: "merged-stack"
        params:
          CONFIG_PATH: ($ .project $)/ansible
          STACK_PATH: ansible
          CREATE_SELF_SIGNED_CERTIFICATE: ((create_self_signed_certificate))
          NGINX_SSL_CERTIFICATE: ((nginx_certificate))
          NGINX_SSL_KEY: ((nginx_certificate_key))
          USE_BASTION: ((use_bastion))

      - task: run-ansible
        config:
          platform: linux
          image_resource:
            type: docker-image
            source:
              repository: cycloid/cycloid-toolkit
              tag: "v((ansible_version))"
          run:
            path: /bin/bash
            args:
              - '-exc'
              - |
                #issue with gnu run locally
                #https://stackoverflow.com/questions/54377305/tar-not-found-in-archive-error-when-using-docker-alpine
                apk add --no-cache tar
                # Static inventory
                ansible-inventory -i ansible-playbook/inventory --graph
                /usr/bin/ansible-runner
          caches:
            - path: ansible-playbook/roles
          inputs:
          - name: merged-stack
            path: ansible-playbook
        params:
          SSH_PRIVATE_KEY: ((ssh_private_key))
          ANSIBLE_PLAYBOOK_PATH: ansible-playbook
          ANSIBLE_PLAYBOOK_NAME: main.yml
#($- if eq .use_bastion true $)
          BASTION_URL: ((bastion_url))
          BASTION_PRIVATE_KEY: ((bastion_keypair))
#($- end $)
          ANSIBLE_INVENTORY: inventory
          EXTRA_ANSIBLE_ARGS: "-i inventory"
          ANSIBLE_FORCE_GALAXY: false
          ANSIBLE_REMOTE_USER:  admin
#($- if eq .use_case "aws-vm" $)
          AWS_USE_PRIVATE_IP: false
          EXTRA_ARGS: "--limit tag_vm_aws"
#($- else if eq .use_case "azure-vm" $)
#          AZURE_USE_PRIVATE_IP: false
#          EXTRA_ARGS: "--limit tag_vm_azure"
#($- end $)
          EXTRA_ANSIBLE_VARS:
            env: ($ .environment $)
            project: ($ .project $)
            customer: ($ .organization_canonical $)
            role: "monitoring"
            grafana_web_login: ((grafana_web_login))
            grafana_admin_pwd: ((grafana_admin_pwd))
            grafana_admin_user: ((grafana_admin_user))
            alertmanager_web_login: ((alertmanager_web_login))
            prometheus_web_login: ((prometheus_web_login))
            external_alertmanager_password: ((external_alertmanager_password))
            external_alertmanager_username: ((external_alertmanager_username))
            external_alertmanager_targets: ((external_alertmanager_targets))
            prometheus_domain_name: ((prometheus_domain_name))
            alertmanager_domain_name: ((alertmanager_domain_name))
#($- if eq .use_case "aws-vm" $)
            aws_default_region: ((aws_default_region))
#($- else if eq .use_case "azure-vm" $)
#            azure_subscription_id: ((($ .azure_cred $).subscription_id))
#            azure_tenant_id: ((($ .azure_cred $).tenant_id))
#            azure_client_id: ((($ .azure_cred $).client_id))
#            azure_client_secret: ((($ .azure_cred $).client_secret))
#            azure_resource_group: ($ .resource_group_name $)
#($- end $)

  - name: terraform-destroy
    serial: true
    serial_groups: [terraform]
    build_logs_to_retain: 10
    plan:
      - do:
          - get: git_stack_terraform
            trigger: false
          - get: git_config_terraform
            trigger: false
          - *task-merge-stack-and-config
          - put: tfstate
            params:
              action: destroy
              terraform_source: merged-stack/
            get_params:
              action: destroy